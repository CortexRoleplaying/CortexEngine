// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

bool libcrtx_command_kill(bool testConds, bool runActions) {
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitKill( UnitGroupLoopCurrent() );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_remove(bool testConds, bool runActions) {
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitRemove( UnitGroupLoopCurrent() );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_removearea(bool testConds, bool runActions) {
      unitgroup g;
      fixed radius = StringToFixed( StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 ));
      if(radius == 0.0) {
        radius = 5.0;
      }

	g = UnitGroup( null, c_playerAny, RegionCircle( UnitGetPosition(libcrtx_spawner()), radius), null, 0 );
      g = libcrtx_enforce_unit_permissions(g);

	UnitGroupLoopBegin(g);

	while(!UnitGroupLoopDone())

	{

		UnitRemove( UnitGroupLoopCurrent() );

		UnitGroupLoopStep();

	}

	UnitGroupLoopEnd();

	return true;

}

bool libcrtx_command_scale(bool testConds, bool runActions) {
	fixed scale;
	fixed scaleY;
	fixed scaleZ;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	scale = StringToFixed(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2));
	scaleY = StringToFixed(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 3));
	scaleZ = StringToFixed(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 4));
	
	if(scaleZ == 0.0) {
		scaleZ = scale;
	}
	
	if(scaleY == 0.0) {
		scaleY = scale;
	}
	
	// Verify bounds.
	scale = MinF( libcrtx_setting_getfixed(libcrtx_setting_fixed_maxscale), scale );
	scale = MaxF( libcrtx_setting_getfixed(libcrtx_setting_fixed_minscale), scale );
	
	scaleY = MinF( libcrtx_setting_getfixed(libcrtx_setting_fixed_maxscale), scaleY );
	scaleY = MaxF( libcrtx_setting_getfixed(libcrtx_setting_fixed_minscale), scaleY );
	
	scaleZ = MinF( libcrtx_setting_getfixed(libcrtx_setting_fixed_maxscale), scaleZ );
	scaleZ = MaxF( libcrtx_setting_getfixed(libcrtx_setting_fixed_minscale), scaleZ );

	// Translate to Blizzard SC2 system.
	scale = scale * 100;
	scaleY = scaleY * 100;
	scaleZ = scaleZ * 100;
	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetScale( UnitGroupLoopCurrent(), scale, scaleY, scaleZ );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;	
}

bool libcrtx_command_give(bool testConds, bool runActions) {
	int newOwner;
	string nextParam;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	nextParam = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	newOwner = libcrtx_color_to_player(nextParam);
	if(newOwner == -1) { // invalid entry by user
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetOwner( UnitGroupLoopCurrent(), newOwner, true );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_givecolor(bool testConds, bool runActions) {
	int newOwner;
	int oldOwner;
	string nextParam;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	nextParam = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	newOwner = libcrtx_color_to_player(nextParam);
	if(newOwner == -1) { // invalid entry by user
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetOwner( UnitGroupLoopCurrent(), newOwner, false );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_color(bool testConds, bool runActions) {
	int newColour;
	string nextParam;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	nextParam = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	newColour = libcrtx_color_to_player_default(nextParam);
	if(newColour == -1) { // invalid entry by user
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetTeamColorIndex( UnitGroupLoopCurrent(), newColour );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_invulnerable(bool testConds, bool runActions) {
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetState( UnitGroupLoopCurrent(), c_unitStateInvulnerable, true );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}


bool libcrtx_command_vulnerable(bool testConds, bool runActions) {
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetState( UnitGroupLoopCurrent(), c_unitStateInvulnerable, false );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_pause(bool testConds, bool runActions) {
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetState( UnitGroupLoopCurrent(), c_unitStatePaused, true );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_unpause(bool testConds, bool runActions) {
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetState( UnitGroupLoopCurrent(), c_unitStatePaused, false );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}


bool libcrtx_command_movable(bool testConds, bool runActions) {
	string msg;
	bool enable;
	bool query;
	string nextParam;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	query = false;
	nextParam = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	if( nextParam == "on" ) {
		enable = true;
	} else if( nextParam == "off" ) {
		enable = false; 
	} else {
		// print whether it is or isn't.
		query = true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		if( query ) {
			if( UnitTestState( UnitGroupLoopCurrent(), c_unitStateMoveSuppressed ) ) {
				libcrtx_write( PlayerGroupSingle(EventPlayer()), "This unit is not movable.");
			} else {
				libcrtx_write( PlayerGroupSingle(EventPlayer()), "This unit is movable.");
			}
		} else {
			UnitSetState( UnitGroupLoopCurrent(), c_unitStateMoveSuppressed, enable );
		}

		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_life(bool testConds, bool runActions) {
	string nextParam;
	fixed val;
	bool percent = false;
	int position = 0;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	nextParam = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );

	if( StringContains(nextParam, "%", c_stringAnywhere, c_stringCase) ) {
		percent = true;
		nextParam = StringSub(nextParam, 1, StringLength(nextParam)-1);
	}

	val = StringToFixed(nextParam);

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		if(percent) {
			UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropLifePercent, val );
		} else {
			UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropLife, val );
		}
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_energy(bool testConds, bool runActions) {
	string nextParam;
	fixed val;
	bool percent = false;
	int position = 0;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	nextParam = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );

	if( StringContains(nextParam, "%", c_stringAnywhere, c_stringCase) ) {
		percent = true;
		nextParam = StringSub(nextParam, 1, StringLength(nextParam)-1);
	}

	val = StringToFixed(nextParam);

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		if(percent) {
			UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropEnergyPercent, val );
		} else {
			UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropEnergy, val );
		}
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_shields(bool testConds, bool runActions) {
	string nextParam;
	fixed val;
	bool percent = false;
	int position = 0;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	nextParam = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );

	if( StringContains(nextParam, "%", c_stringAnywhere, c_stringCase) ) {
		percent = true;
		nextParam = StringSub(nextParam, 1, StringLength(nextParam)-1);
	}

	val = StringToFixed(nextParam);

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		if(percent) {
			UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropShieldsPercent, val );
		} else {
			UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropShields, val );
		}
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_tint(bool testConds, bool runActions) {
	string paramOne;
	string paramTwo;
	string paramThree;
	string paramFour;

	int red;
	int green;
	int blue;
	fixed alpha;

	string amsg;
	actorscope ascope;
	actor act;

	unitgroup g = libcrtx_chat_get_context(EventPlayer());

	paramOne = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	paramTwo = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 3 );
	paramThree = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 4 );
	paramFour = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 5 );

	if( StringContains(paramOne, "%", c_stringAnywhere, false) ) {
		paramOne = StringSub(paramOne, 1, StringLength(paramOne)-1);
		red = FixedToInt( 255.0 * StringToFixed(paramOne)/100.0 );
	} else {
		red = StringToInt(paramOne);
	}
	red = libcrtx_boundsInt(red, 0, 255);
	
	if( StringContains(paramTwo, "%", c_stringAnywhere, false) ) {
		paramTwo = StringSub(paramTwo, 1, StringLength(paramTwo)-1);
		green = FixedToInt( 255.0 * StringToFixed(paramTwo)/100.0 );
	} else {
		green = StringToInt(paramTwo);
	}
	green = libcrtx_boundsInt(green, 0, 255);
	
	if( StringContains(paramThree, "%", c_stringAnywhere, false) ) {
		paramThree = StringSub(paramThree, 1, StringLength(paramThree)-1);
		blue = FixedToInt( 255.0 * StringToFixed(paramThree)/100.0 );
	} else {
		blue = StringToInt(paramThree);
	}
	blue = libcrtx_boundsInt(blue, 0, 255);
	
	if( StringContains(paramFour, "%", c_stringAnywhere, false) ) {
		paramFour = StringSub(paramFour, 1, StringLength(paramFour)-1);
		alpha = StringToFixed(paramFour)/100.0;
	} else {
		alpha = StringToFixed(paramFour);
	}
	alpha = libcrtx_boundsFixed(alpha, 0, 1);

	if( paramFour == "" ) { // Unspecified, default to 1.0
		alpha = 1.0;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "SetTintColor " + IntToString(red) + "," + IntToString(green) + "," + IntToString(blue));
		ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "SetOpacity {" + FixedToString(alpha, c_fixedPrecisionAny) + "} {" + "0 }");
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_face(bool testConds, bool runActions) {
	fixed angleToFace;
	string nextParam;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());

	nextParam = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	if( nextParam != "" ) {
		angleToFace = StringToFixed( nextParam );
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		// face spawner
		if( nextParam == "" ) {
			libNtve_gf_MakeUnitFacePoint( UnitGroupLoopCurrent(), UnitGetPosition(libcrtx_spawner()), 0.0 );
		} else {
			// face angle
			UnitSetFacing( UnitGroupLoopCurrent(), angleToFace, 0.0 );
			libcrtx_debug("making face " + FixedToString(angleToFace, c_fixedPrecisionAny));
		}
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_height(bool testConds, bool runActions) {
	fixed height;
	fixed time;
	string nextParam;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	nextParam = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	height = StringToFixed( nextParam );
	nextParam = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 3 );
	time = StringToFixed( nextParam );

	UnitGroupLoopBegin(g);
	while( !UnitGroupLoopDone() )
	{
		// set height
		UnitSetHeight( UnitGroupLoopCurrent(), height, time );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_addweapon(bool testConds, bool runActions) {
	string weapon;
	string turret;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	weapon = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	turret = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 3 );
	
	if( turret == "" ) {
		turret = "CTurret";
	}
	
	// use toolkit on weapon
	weapon = libcrtx_toolkit_getweapon(weapon);
	if (!CatalogEntryIsValid(c_gameCatalogWeapon, weapon)) {
		return true;
	}

	UnitGroupLoopBegin(g);
	while( !UnitGroupLoopDone() )
	{
		UnitWeaponAdd( UnitGroupLoopCurrent(), weapon, turret );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_removeweapon(bool testConds, bool runActions) {
	string weapon;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	weapon = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );

	// use toolkit on weapon
	weapon = libcrtx_toolkit_getweapon(weapon);
	if (!CatalogEntryIsValid(c_gameCatalogWeapon, weapon)) {
		return true;
	}
	
	UnitGroupLoopBegin(g);
	while( !UnitGroupLoopDone() )
	{
		UnitWeaponRemove( UnitGroupLoopCurrent(), weapon );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_maxlife(bool testConds, bool runActions) {
	fixed val;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = StringToFixed(StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 ));

	if( val <= 0 ) { // Bad input!
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropLifeMax, val );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_maxenergy(bool testConds, bool runActions) {
	fixed val;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = StringToFixed(StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 ));

	if( val <= 0 ) { // Bad input!
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropEnergyMax, val );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_maxshields(bool testConds, bool runActions) {
	fixed val;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = StringToFixed(StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 ));

	if( val <= 0 ) { // Bad input!
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropShieldsMax, val );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_speed(bool testConds, bool runActions) {
	fixed val;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = StringToFixed(StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 ));

	if( val <= 0 ) { // Bad input!
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropMovementSpeed, val );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_kills(bool testConds, bool runActions) {
	fixed val;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = StringToFixed(StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 ));

	if( val <= 0 ) { // Bad input!
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitSetPropertyFixed( UnitGroupLoopCurrent(), c_unitPropKills, val );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_level(bool testConds, bool runActions) {
	int val;
      int vval;

	unitgroup g = libcrtx_chat_get_context(EventPlayer());

	val = StringToInt(StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 ));

	if( val <= 0 || val > libcrtx_toolkit_getmaxlevel()) { // Bad input!
		return true;
	}


	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		vval = val;

            // game crashes otherwise. silly blizzard.
            if( !UnitHasBehavior(UnitGroupLoopCurrent(), libcrtx_toolkit_getlevelbehavior()) ) {
                UnitGroupLoopStep();
                continue;
            }

            if( UnitLevel(UnitGroupLoopCurrent()) >= vval ) {
                UnitGroupLoopStep();
                continue;
            }

            while( UnitLevel(UnitGroupLoopCurrent()) < vval ) {
                UnitCreateEffectUnit( UnitGroupLoopCurrent(), libcrtx_toolkit_getxpincrementbehavior(), UnitGroupLoopCurrent() );
            }
		UnitGroupLoopStep();
	}

	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_adddamage(bool testConds, bool runActions) {
	int looperMan;
	int val;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = StringToInt(StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 ));
	if(val > 9999) {
	   val = 9999;
	}

	if(val < 0) {
		// Use @removedamage and redirect the command.
		libcrtx_chat_redirect_command( EventPlayer(), "@removedamage", IntToString(AbsI(val)) );
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		// First remove all damage bonuses and maluses, since we're now treating this as a "strictly positive setdamagebonus" command. -F
		looperMan = 1;
		while(looperMan < 9) {
			UnitBehaviorRemove( UnitGroupLoopCurrent(), libcrtx_toolkit_getdamagebehavior(looperMan), 9);
			looperMan = looperMan + 1;
		}
		
			// Now do the magic - keep adding the appropriate behaviors until they reach the desired total damage bonus. -F
			looperMan = 0;
			while(val >= 1000) {
				UnitBehaviorAdd( UnitGroupLoopCurrent(), libcrtx_toolkit_getdamagebehavior(4), UnitGroupLoopCurrent(), 1 );
				val = val - 1000;
				looperMan = looperMan + 1;
			}
			while(val >= 100) {
				UnitBehaviorAdd( UnitGroupLoopCurrent(), libcrtx_toolkit_getdamagebehavior(3), UnitGroupLoopCurrent(), 1 );
				val = val - 100;
				looperMan = looperMan + 1;
			}
			while(val >= 10) {
				UnitBehaviorAdd( UnitGroupLoopCurrent(), libcrtx_toolkit_getdamagebehavior(2), UnitGroupLoopCurrent(), 1 );
				val = val - 10;
				looperMan = looperMan + 1;
			}
			UnitBehaviorAdd( UnitGroupLoopCurrent(), libcrtx_toolkit_getdamagebehavior(1), UnitGroupLoopCurrent(), val );
			
		UnitGroupLoopStep();
	}

	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_removedamage(bool testConds, bool runActions) {
	// This command is a direct CnP of adddamage, with some values changed and comments edited to reflect.
	// Pay particular attention to the numbers passed to libcrtx_toolkit_getdamagebehavior()
	// when editing. -F
	
	int looperMan;
	int val;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = StringToInt(StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 ));
	if(val > 9999) {
	   val = 9999;
	}

	if(val < 0) {
		// Use @adddamage and redirect the command.
		libcrtx_chat_redirect_command( EventPlayer(), "@adddamage", IntToString(AbsI(val)) );
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		// First remove all damage bonuses and maluses, since we're now treating this as a "strictly positive setdamagemalus" command. -F
		looperMan = 1;
		while(looperMan < 9) {
			UnitBehaviorRemove( UnitGroupLoopCurrent(), libcrtx_toolkit_getdamagebehavior(looperMan), 9);
			looperMan = looperMan + 1;
		}
		
			// Now do the magic - keep adding the appropriate behaviors until they reach the desired total damage bonus. -F
			looperMan = 0;
			while(val >= 1000) {
				UnitBehaviorAdd( UnitGroupLoopCurrent(), libcrtx_toolkit_getdamagebehavior(8), UnitGroupLoopCurrent(), 1 );
				val = val - 1000;
				looperMan = looperMan + 1;
			}
			while(val >= 100) {
				UnitBehaviorAdd( UnitGroupLoopCurrent(), libcrtx_toolkit_getdamagebehavior(7), UnitGroupLoopCurrent(), 1 );
				val = val - 100;
				looperMan = looperMan + 1;
			}
			while(val >= 10) {
				UnitBehaviorAdd( UnitGroupLoopCurrent(), libcrtx_toolkit_getdamagebehavior(6), UnitGroupLoopCurrent(), 1 );
				val = val - 10;
				looperMan = looperMan + 1;
			}
			UnitBehaviorAdd( UnitGroupLoopCurrent(), libcrtx_toolkit_getdamagebehavior(5), UnitGroupLoopCurrent(), val );
			
		UnitGroupLoopStep();
	}

	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_attach(bool testConds, bool runActions) {
	string actr;
      	string apoint;
	string scope;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	actr = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
      	apoint = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 3 );

	// Look up this Actor and verify it is not CActorEventMacro
	if( !CatalogEntryIsValid(c_gameCatalogActor, actr) ) {
		return true;
	}

	scope = CatalogEntryScope( c_gameCatalogActor, actr );
	if( scope == "CActorEventMacro" || scope == "CActorSound" ) {
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
            	libNtve_gf_AttachActorToUnit( UnitGroupLoopCurrent(), actr, apoint);
            	UIDisplayMessage( PlayerGroupAll(), c_messageAreaDebug, ActorScopeGetText( ActorScopeFromUnit( UnitGroupLoopCurrent() ) ));
            	UIDisplayMessage( PlayerGroupAll(), c_messageAreaDebug, ActorGetText( libNtve_gf_MainActorofUnit( UnitGroupLoopCurrent() ) ));
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_removebehavior(bool testConds, bool runActions) {
	string val;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitBehaviorRemove( UnitGroupLoopCurrent(), val, 1 );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_addbehavior(bool testConds, bool runActions) {
	string val;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );

	if( libcrtx_toolkit_isrestrictedbehavior(val) ) {
		return true;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		UnitBehaviorAdd( UnitGroupLoopCurrent(), val, UnitGroupLoopCurrent(), 1 );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

unit[libcrtx_max_players] libcrtx_command_firstperson_unit;
bool[libcrtx_max_players][2] libcrtx_command_firstperson_mousestatus;
bool[libcrtx_max_players] libcrtx_command_firstperson_pending;
bool[libcrtx_max_players] libcrtx_command_firstperson_setup;
int[libcrtx_max_players] libcrtx_command_firstperson_dialog;

bool libcrtx_command_firstperson_selectedunit(bool testConds, bool runActions)
{
	unit u;
	int bossbar;
	string s;
	string r;
	if( libcrtx_command_firstperson_unit[EventPlayer()] == null ) {
		return true;
	}

	u = EventUnit();
	bossbar = libcrtx_generate_bossbar_id(EventPlayer(), 1);
	if( CatalogEntryIsValid(c_gameCatalogActor, UnitGetType(u)) ) {
		s = CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(u), "UnitIcon", EventPlayer());
	} else {
		s = "Assets\\Textures\\btn-unit-terran-marine.dds";
	}
	libNtve_gf_DisplayBossBar( bossbar, s, UnitTypeGetName( UnitGetType(u) ), 1, PlayerGroupSingle(EventPlayer()));
	libNtve_gf_SetBossBarBoss( bossbar, u, true );
	r = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(u), "Race", EventPlayer());
	if( StringEqual(r, "Terr", false) ) {
		libNtve_gf_SetBossBarRace( bossbar, 0, true );
	} else if( StringEqual(r, "Zerg", false) ) {
		libNtve_gf_SetBossBarRace( bossbar, 2, true );
	} else {
		libNtve_gf_SetBossBarRace( bossbar, 1, true );
	}
	libNtve_gf_MoveBossBar( bossbar, c_anchorTop, 50, 50);
	libNtve_gf_ShowHideBossBar( true, bossbar );

	return true;
}
bool libcrtx_command_firstperson_mouseclick(bool testConds, bool runActions)
{
	if( libcrtx_command_firstperson_unit[EventPlayer()] == null ) {
		return true;
	}

	if( EventMouseClickedButton() == c_mouseButtonLeft ) {
		libcrtx_command_firstperson_mousestatus[EventPlayer()][0] = !libcrtx_command_firstperson_mousestatus[EventPlayer()][0];

		if( libcrtx_command_firstperson_mousestatus[EventPlayer()][0] ) {
			Wait(0.25, c_timeReal);
			if( libcrtx_command_firstperson_mousestatus[EventPlayer()][0] ) {
				CameraLockInput(EventPlayer(), false);
				CameraForceMouseRelative(EventPlayer(), true);
				CameraSetMouseRotates(EventPlayer(), true);
			}
		}
		if( !libcrtx_command_firstperson_mousestatus[EventPlayer()][0] ) {
			if( !libcrtx_command_firstperson_mousestatus[EventPlayer()][0] ) {
				CameraLockInput(EventPlayer(), true);
				CameraForceMouseRelative(EventPlayer(), false);
				CameraSetMouseRotates(EventPlayer(), false);
			}
		}
	}

	if( EventMouseClickedButton() == c_mouseButtonRight ) {
		if( !libcrtx_command_firstperson_mousestatus[EventPlayer()][1] && libcrtx_command_firstperson_pending[EventPlayer()] ) {
			libcrtx_command_firstperson_pending[EventPlayer()] = false;
			return true;
		}

		if( !libcrtx_command_firstperson_mousestatus[EventPlayer()][1] && !libcrtx_command_firstperson_pending[EventPlayer()] ) {
			libcrtx_command_firstperson_pending[EventPlayer()] = true;
			Wait(0.3, c_timeReal);
			if( !libcrtx_command_firstperson_mousestatus[EventPlayer()][1] && libcrtx_command_firstperson_pending[EventPlayer()] ) {
				libcrtx_command_firstperson_pending[EventPlayer()] = false;
				libcrtx_command_firstperson_mousestatus[EventPlayer()][1] = true;
			} else {
				return true;
			}
		}

		libcrtx_command_firstperson_mousestatus[EventPlayer()][1] = !libcrtx_command_firstperson_mousestatus[EventPlayer()][1];

		if( libcrtx_command_firstperson_mousestatus[EventPlayer()][1] ) {
				CameraLockInput(EventPlayer(), false);
				CameraForceMouseRelative(EventPlayer(), true);
				CameraSetMouseRotates(EventPlayer(), true);
		}
		if( !libcrtx_command_firstperson_mousestatus[EventPlayer()][1] ) {
				CameraLockInput(EventPlayer(), true);
				CameraForceMouseRelative(EventPlayer(), false);
				CameraSetMouseRotates(EventPlayer(), false);
		}
	}

	return true;
}

bool libcrtx_command_firstperson(bool testConds, bool runActions) {
	string r;
	trigger t;
	unit u;
	string s;
	camerainfo cam;
	int bossbar_origin;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	bossbar_origin = libcrtx_generate_bossbar_id(EventPlayer(), 0);
	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		u = UnitGroupLoopCurrent();
		libcrtx_command_firstperson_unit[EventPlayer()] = u;		

		UISetMode( PlayerGroupSingle(EventPlayer()), c_uiModeLetterboxed, 1.0);
		UISetFrameVisible( PlayerGroupSingle(EventPlayer()), c_syncFrameTypeHeroPanel, false );
		cam = libNtve_gf_CopyOfCameraObject(CameraInfoDefault());
		CameraInfoSetValue(cam, c_cameraValuePitch, 35);
		CameraInfoSetValue(cam, c_cameraValueDistance, 10);
		CameraInfoSetValue(cam, c_cameraValueHeightOffset, 1 + UnitGetHeight(u));
		CameraInfoSetValue(cam, c_cameraValueFarClip, 80);
		CameraApplyInfo(EventPlayer(), cam, 2.0, -1, 10, false);
		CameraUseHeightSmoothing(EventPlayer(), true);
		CameraUseHeightDisplacement(EventPlayer(), true);
		CameraLockInput(EventPlayer(), true);
		if( CatalogEntryIsValid(c_gameCatalogActor, UnitGetType(u)) ) {
			s = CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(u), "UnitIcon", EventPlayer());
		} else {
			s = "Assets\\Textures\\btn-unit-terran-marine.dds";
		}
		libNtve_gf_DisplayBossBar( bossbar_origin, s, UnitTypeGetName( UnitGetType(u) ), 1, PlayerGroupSingle(EventPlayer()));
		libNtve_gf_SetBossBarBoss( bossbar_origin, UnitGroupLoopCurrent(), true );
		r = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(u), "Race", EventPlayer());
		if( StringEqual(r, "Terr", false) ) {
			libNtve_gf_SetBossBarRace( bossbar_origin, 0, true );
		} else if( StringEqual(r, "Zerg", false) ) {
			libNtve_gf_SetBossBarRace( bossbar_origin, 2, true );
		} else {
			libNtve_gf_SetBossBarRace( bossbar_origin, 1, true );
		}
		libNtve_gf_MoveBossBar( bossbar_origin, c_anchorTopLeft, 50, 50);
		libNtve_gf_ShowHideBossBar( true, bossbar_origin );

		libactionbar_set_active_unit(EventPlayer(), u);

		libcrtx_command_firstperson_dialog[EventPlayer()] = DialogCreate(400, 400, c_anchorTopRight, 0, 50, true);
		DialogControlCreateFromTemplate((DialogLastCreated()), c_triggerControlTypeImage, "MinimapPanel/MinimapPanelTemplate");
        	DialogControlSetSize((DialogControlLastCreated()), (PlayerGroupAll()), 400, 400);
        	DialogSetImageVisible((DialogLastCreated()), false);
        	DialogSetVisible((DialogLastCreated()), (PlayerGroupSingle(EventPlayer())), true);

		if( !libcrtx_command_firstperson_setup[EventPlayer()] ) {
			libcrtx_command_firstperson_setup[EventPlayer()] = true;
			TriggerAddEventMouseClicked( TriggerCreate("libcrtx_command_firstperson_mouseclick"), EventPlayer(), c_mouseButtonLeft, true);
			TriggerAddEventMouseClicked( TriggerCreate("libcrtx_command_firstperson_mouseclick"), EventPlayer(), c_mouseButtonRight, true);
			TriggerAddEventMouseClicked( TriggerCreate("libcrtx_command_firstperson_mouseclick"), EventPlayer(), c_mouseButtonLeft, false);
			TriggerAddEventMouseClicked( TriggerCreate("libcrtx_command_firstperson_mouseclick"), EventPlayer(), c_mouseButtonRight, false);
			TriggerAddEventUnitSelected( TriggerCreate("libcrtx_command_firstperson_selectedunit"), null, EventPlayer(), true );
		}

		UnitGroupLoopEnd();
		
		while(u != null && UnitIsValid(u) && UnitIsAlive(u) && u == libcrtx_command_firstperson_unit[EventPlayer()] ) {
			CameraPan( EventPlayer(), UnitGetPosition(u), 0.0, -1, 10, false );
			if( libcrtx_command_firstperson_mousestatus[EventPlayer()][1] ) {
				UnitSetFacing(u, CameraGetYaw(EventPlayer()), 0.1);
			}
			Wait(0.1, c_timeReal);
		}
		break;
	}
	// No end unit loop.
	return true;
}

bool libcrtx_command_thirdperson(bool testConds, bool runActions) {
	int bar = libcrtx_generate_bossbar_id(EventPlayer(), 0);
	UISetMode( PlayerGroupSingle(EventPlayer()), c_uiModeConsole, 1.0);
	libcrtx_command_firstperson_unit[EventPlayer()] = null;
	CameraUseHeightSmoothing(EventPlayer(), false);
	CameraSetMouseRotates(EventPlayer(), false);
	UISetFrameVisible( PlayerGroupSingle(EventPlayer()), c_syncFrameTypeHeroPanel, true );
	libNtve_gf_ShowHideBossBar( false, bar);
	libNtve_gf_ShowHideBossBar( false, bar+1);
	CameraApplyInfo( EventPlayer(), CameraInfoDefault(), 2.0, -1, 10, false );
	CameraLockInput(EventPlayer(), false);
	libcrtx_command_firstperson_mousestatus[EventPlayer()][0] = false;
	libcrtx_command_firstperson_mousestatus[EventPlayer()][1] = false;
	CameraForceMouseRelative(EventPlayer(), false); 
	libactionbar_set_active_unit(EventPlayer(), null);
	DialogDestroy(libcrtx_command_firstperson_dialog[EventPlayer()]);
	return true;
}

bool libcrtx_command_play(bool testConds, bool runActions) {
	string val;
	int flags = 0;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	val = StringCase(StringSub(val, 1, 1), true) + StringSub(val, 2, StringLength(val));

	if( StringEqual(StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 3), "loop", false) ) {
		flags = c_animFlagPlayForever;
	}

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		if( StringEqual(val, "reset", false) ) {
			libNtve_gf_ClearAnimation( libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "libcrtx_command_play" );
		} else {
			libNtve_gf_PlayAnimation( libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "libcrtx_command_play", val, flags, 1 );
		}
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_renameall(bool testConds, bool runActions) {
	string val;
	unitgroup g = libcrtx_chat_get_context(EventPlayer());
	val = libcrtx_chat_get_parse_line(EventPlayer());
	val = StringSub( val, StringFind(val, " ", c_stringCase)+1, StringLength(val)); // The remainder of the chat message.	

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone())
	{
		CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(UnitGroupLoopCurrent()), "Name", EventPlayer(), val);
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	return true;
}

bool libcrtx_command_context(bool testConds, bool runActions) {
	string val = libcrtx_chat_get_parse_line(EventPlayer());
	val = StringWord( val, 2 );

	if( libcrtx_variable_exists( EventPlayer(), val, libcrtx_variable_type_unitgroup ) ) {
		libcrtx_chat_set_context(EventPlayer(), libcrtx_variable_get_group(EventPlayer(), val));
	}

	return true;
}











