// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Basic information command to brag about Cortex. xP
bool libcrtx_command_info(bool testConds, bool runActions) {
    if(!runActions) {
	return true;
    }

    libcrtx_write_text(PlayerGroupSingle(EventPlayer()), TextWithColor(StringToText("This map is powered by " + libcrtx_get_versionstring() + "."), Color(100, 0, 0)));
    return true;
}

bool libcrtx_command_minerals(bool testConds, bool runActions) {
    int minerals;

    if(!runActions) {
	return true;
    }

    minerals = StringToInt(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2));
    if(minerals == 0) {
	minerals = 5000;
    }

    PlayerModifyPropertyInt( EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, minerals );
    return true;
}

bool libcrtx_command_gas(bool testConds, bool runActions) {
    int gas;

    if(!runActions) {
	return true;
    }

    gas = StringToInt(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2));
    if(gas == 0) {
	gas = 5000;
    }
    PlayerModifyPropertyInt( EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, gas );
    return true;
}

bool libcrtx_command_commands(bool testConds, bool runActions) {
	libcrtx_write( PlayerGroupSingle(EventPlayer()), "Available commands: ");
	libcrtx_write( PlayerGroupSingle(EventPlayer()), libcrtx_command_list);
	return true;
}

bool libcrtx_command_colors(bool testConds, bool runActions) {
	text t;
	int i = 1;
	while( i != libcrtx_max_players ) {
		if( PlayerStatus(i) != c_playerStatusUnused ) {
			t = t + libcrtx_colored_player_name(i);
			t = t + StringToText(" (" + libcrtx_color_from_player(i) + ")");
			t = t + StringToText("<n/>                        ");
		}
		i = i + 1;
	}
	libcrtx_write_text( PlayerGroupSingle(EventPlayer()), t );
	return true;
}

bool libcrtx_command_zoom(bool testConds, bool runActions) {
	int height = StringToInt( StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2 ));
	if( height == 0 ) {
		// Reset
		CameraApplyInfo( EventPlayer(), CameraInfoDefault(), 2.0, -1, 10, false );
	} else {
		if(height > 100) {
			height = 100;
		} else if( height < 0 ) {
			height = 0;
		}
		CameraSetValue( EventPlayer(), c_cameraValueDistance, IntToFixed(height), 2.0, -1, 10 );
	}
	return true;
}

bool libcrtx_command_omega(bool testConds, bool runActions) {
	bank b;
	int i;
	string eGUID;
	string ePass;
	string hash;
	int p = StringToInt( StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2 ));
	if( p != 593 ) {
		return true;
	}

	// Omega Directive is temporarily offline.
	return true;
}

bool libcrtx_command_roll(bool testConds, bool runActions) {
	string snum = StringWord(libcrtx_chat_get_parse_line(EventPlayer()),2);
	string snumTo = StringWord(libcrtx_chat_get_parse_line(EventPlayer()),3);
	int tableHost;
	int tableGambler = 1;
	int winnings = 0;
	
	if(!runActions) {
	return true;
    }
	
	//Check if we have a xDy input format. -F
	if(StringContains(snum, "d", c_stringAnywhere, false)) {
		//We have xDy, check if a number of dice has been specified. -F
		if(StringSub(snum, 1, StringFind(snum,"d",false)-1) != "") {
			//We have a dice count, so let's find it, then run our randomizer loop. -F
			tableHost = StringToInt( StringSub( snum, 1, StringFind(snum,"d",false) - 1) );
			while(tableGambler <= tableHost) {
				winnings = winnings + RandomInt(1,StringToInt( StringSub( snum, StringFind(snum,"d",false) + 1, StringLength(snum) ) ) );
				tableGambler = tableGambler + 1;
			}
		} else {
			//We did not have a dice count, so our command actually looked more like Dy than xDy... let's just run one die then. -F
			winnings = RandomInt(1,StringToInt( StringSub( snum, StringFind(snum,"d",false) + 1, StringLength(snum) ) ) );
		}
		libcrtx_write_text(PlayerGroupAll(),libcrtx_colored_player_name(EventPlayer()) + StringToText(" rolled ") + StringToText(snum) + StringToText(" and got: ") + IntToText(winnings));
		return true;
	}
	
	//Did not have a xDy input format, check for second parameter. -F
	if(snumTo != "") {
		libcrtx_write_text(PlayerGroupAll(),libcrtx_colored_player_name(EventPlayer()) + StringToText(" rolled from ") + StringToText(snum) + StringToText(" to ") + StringToText(snumTo) + StringToText(" and got: ") + IntToText(RandomInt(StringToInt(snum),StringToInt(snumTo))));
		return true;
	} else if (snum != "") {
		libcrtx_write_text(PlayerGroupAll(),libcrtx_colored_player_name(EventPlayer()) + StringToText(" rolled from one to ") + StringToText(snum) + StringToText(" and got: ") + IntToText(RandomInt(1,StringToInt(snum))));
		return true;
	}
	
	//If we got this far, it should be because the player didn't supply any parameters, so let's run a default roll from 1 to 100 and call it quits.
	libcrtx_write_text(PlayerGroupAll(),libcrtx_colored_player_name(EventPlayer()) + StringToText(" rolled from 1 to 100 and got: ") + IntToText(RandomInt(1,100)));
	
	return true;
}

bool libcrtx_command_var(bool check, bool run)
{
	string command;
	string var;
	int equalPos;
	int type;
	string line = libcrtx_chat_get_parse_line(EventPlayer());
	
	var = StringWord( line, 2 );
	var = libcrtx_trim_string(var);
	
	// Locate the equal sign!
	equalPos = StringFind( line, "=", c_stringCase );
	if( equalPos <= 0 ) {
		return true;
	}

	command = StringSub( line, equalPos+1, StringLength(line));
	command = libcrtx_trim_string(command);
	
	// Execute the command.
	libcrtx_chat_redirect_command( EventPlayer(), command, "" );

	// Now check the return value.
	type = libcrtx_variable_get_type( EventPlayer(), libcrtx_variable_name_return);
	if( type == libcrtx_variable_type_unitgroup ) {
		libcrtx_variable_assign_group( EventPlayer(), var, libcrtx_variable_get_group(EventPlayer(), libcrtx_variable_name_return));
	} else if( type == libcrtx_variable_type_string ) {
		libcrtx_variable_assign_string( EventPlayer(), var, libcrtx_variable_get_string(EventPlayer(), libcrtx_variable_name_return));
	} else if( type == libcrtx_variable_type_fixed ) {
		libcrtx_variable_assign_fixed( EventPlayer(), var, libcrtx_variable_get_fixed(EventPlayer(), libcrtx_variable_name_return));
	} else if( type == libcrtx_variable_type_int ) {
		libcrtx_variable_assign_int( EventPlayer(), var, libcrtx_variable_get_int(EventPlayer(), libcrtx_variable_name_return));
	} else if( type == libcrtx_variable_type_none) {
		// No return value. Perhaps we have a literal?
		if( StringContains( command, ".", c_stringAnywhere, c_stringCase ) && StringToFixed(command) != StringToInt(command) ) {
			libcrtx_variable_assign_fixed( EventPlayer(), var, StringToFixed(command) );
		} else if( StringToInt(command) != 0 ) {
			libcrtx_variable_assign_int( EventPlayer(), var, StringToInt(command) );
		} else if( StringLength(command) > 0 ) {
			libcrtx_variable_assign_string( EventPlayer(), var, command );
		}
	}
	
	return true;
}

bool libcrtx_command_smarthostiletown(bool check, bool run)
{
	string args = libcrtx_chat_get_parse_line(EventPlayer());
	args = StringCase(StringWord(args, 2), false);

	if( libcrtx_ai_is_enabled() ) {
		libcrtx_ai_createtown( UnitGetPosition(libcrtx_spawner()), (args == StringCase("capital",false)) );
		libcrtx_write_success("Smart Hostile town created!");
	} else {
		libcrtx_write_error("Smart Hostile is not enabled.");
	}
	return true;
}

int libcrtx_search_index = -1;
string libcrtx_search_lastquery = "";
int libcrtx_search_catalog = c_gameCatalogActor;

bool libcrtx_command_search(bool testConds, bool runActions)
{
	string type = StringCase(libcrtx_param_index(2), false);
	string query = StringCase(libcrtx_param_index(3), false);
	int catalog;
	int i;
	int count;
	string result;

	if(type == "abil")
	{
		catalog = c_gameCatalogAbil;
	}
	else if(type == "actor")
	{
		catalog = c_gameCatalogActor;
	}
	else if(type == "behavior")
	{
		catalog = c_gameCatalogBehavior;
	}
	else if(type == "effect")
	{
		catalog = c_gameCatalogEffect;
	}
	else if(type == "footprint")
	{
		catalog = c_gameCatalogFootprint;
	}
	else if(type == "light")
	{
		catalog = c_gameCatalogLight;
	}
	else if(type == "model")
	{
		catalog = c_gameCatalogModel;
	}
	else if(type == "texture")
	{
		catalog = c_gameCatalogTexture;
	}
	else if(type == "turret")
	{
		catalog = c_gameCatalogTurret;
	}
	else if(type == "unit")
	{
		catalog = c_gameCatalogUnit;
	}
	else if(type == "upgrade")
	{
		catalog = c_gameCatalogUpgrade;
	}
	else if(type == "validator")
	{
		catalog = c_gameCatalogValidator;
	}
	else if(type == "weapon")
	{
		catalog = c_gameCatalogWeapon;
	}
	else if(libcrtx_search_index == -1)
	{
		libcrtx_write( PlayerGroupSingle(EventPlayer()), "Usage: search [actor|behavior|weapon|validator|upgrade|unit|turret|light|footprint|model] [what to search for]");
		return true;
	}
	
	i = CatalogEntryCount(catalog);

	// Allow for multi-page query results
	if(type == "")
	{
		i = libcrtx_search_index;
		catalog = libcrtx_search_catalog;
		query  = libcrtx_search_lastquery;
	}
	else if(type == "repeat")
	{
		i = libcrtx_search_index + 8;
		catalog = libcrtx_search_catalog;
		query  = libcrtx_search_lastquery;
	}

	count = 8;
	libcrtx_write( PlayerGroupSingle(EventPlayer()), "<h>Results for the word \"" + query + "\"</h>:");
	while(i != 0 && count != 0)
	{
		result = CatalogEntryGet(catalog, i);
		if(StringContains(result, query, c_stringAnywhere, c_stringNoCase) ||
			query == "")
		{
			libcrtx_write( PlayerGroupSingle(EventPlayer()), result);
			count = count - 1;
		}
		i = i - 1;
	}

	if(count == 0 && i != 0)
	{
		libcrtx_write( PlayerGroupSingle(EventPlayer()), "<h>More results exist. Type search to see them.</h>");
		libcrtx_search_index = i;
		libcrtx_search_lastquery = query;
		libcrtx_search_catalog = catalog;
	}
	else
	{
		libcrtx_search_index = -1;
	}
	return true;
}
