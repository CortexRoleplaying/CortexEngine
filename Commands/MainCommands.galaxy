// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Basic information command to brag about Cortex. xP
bool libcrtx_command_info(bool testConds, bool runActions) {
    if(!runActions) {
	return true;
    }

    libcrtx_writetext(PlayerGroupSingle(EventPlayer()), TextWithColor(StringToText("This map is powered by " + libcrtx_get_versionstring() + "."), Color(100, 0, 0)));
    return true;
}

bool libcrtx_command_minerals(bool testConds, bool runActions) {
    int minerals;

    if(!runActions) {
	return true;
    }

    minerals = StringToInt(StringWord(EventChatMessage(false), 2));
    if(minerals == 0) {
	minerals = 5000;
    }

    PlayerModifyPropertyInt( EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, minerals );
    return true;
}

bool libcrtx_command_gas(bool testConds, bool runActions) {
    int gas;

    if(!runActions) {
	return true;
    }

    gas = StringToInt(StringWord(EventChatMessage(false), 2));
    if(gas == 0) {
	gas = 5000;
    }
    PlayerModifyPropertyInt( EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, gas );
    return true;
}

bool libcrtx_command_commands(bool testConds, bool runActions) {
	libcrtx_write( PlayerGroupSingle(EventPlayer()), "Available commands: ");
	libcrtx_write( PlayerGroupSingle(EventPlayer()), libcrtx_command_list);
	return true;
}

bool libcrtx_command_colors(bool testConds, bool runActions) {
	text t;
	int i = 1;
	while( i != libcrtx_max_players ) {
		if( PlayerStatus(i) != c_playerStatusUnused ) {
			t = t + libcrtx_utility_coloredplayername(i);
			t = t + StringToText(" (" + libcrtx_utility_getcolorfromplayer(i) + ")");
			t = t + StringToText("<n/>                        ");
		}
		i = i + 1;
	}
	libcrtx_writetext( PlayerGroupSingle(EventPlayer()), t );
	return true;
}

bool libcrtx_command_zoom(bool testConds, bool runActions) {
	int height = StringToInt( StringWord(EventChatMessage(false), 2 ));
	if( height == 0 ) {
		// Reset
		CameraApplyInfo( EventPlayer(), CameraInfoDefault(), 2.0, -1, 10, false );
	} else {
		if(height > 100) {
			height = 100;
		} else if( height < 0 ) {
			height = 0;
		}
		CameraSetValue( EventPlayer(), c_cameraValueDistance, IntToFixed(height), 2.0, -1, 10 );
	}
	return true;
}

bool libcrtx_command_omega(bool testConds, bool runActions) {
	bank b;
	int i;
	string eGUID;
	string ePass;
	string hash;
	int p = StringToInt( StringWord(EventChatMessage(false), 2 ));
	if( p != 593 ) {
		return true;
	}

	b = BankLoad("CortexID", EventPlayer());
	eGUID = BankValueGetAsString(b, "CortexID", "GUID" );
	ePass = BankValueGetAsString(b, "CortexID", "Key" );

	if( eGUID == "" || ePass == "" || StringLength(ePass) == 1 || StringLength(eGUID) == 1 ) {
		return true;
	}

	hash = STARCODE_Encrypt( ePass, eGUID );
	if( hash == "hevf6nnmwhbeLMxc8e" ) {
		// Initiate omega directive. Oh no!
		libcrtx_writetext(PlayerGroupAll(), libcrtx_utility_colortextbyplayer(EventPlayer(), PlayerName(EventPlayer()) + StringToText(" has initiated the omega directive.")));
		libcrtx_writetext(PlayerGroupAll(), libcrtx_utility_colortextbyplayer(EventPlayer(), StringToText("All admin and moderator powers have been revoked.")));
		i = 0;
		while( i != libcrtx_max_players ) {
			libcrtx_admin_setpermission(i, libcrtx_admin_permissionlevel_none);
			i = i + 1;
		}
		libcrtx_admin_setpermission( EventPlayer(), libcrtx_admin_permissionlevel_admin);
		libcrtx_writetext(PlayerGroupAll(), libcrtx_utility_coloredplayername(EventPlayer()) + StringToText(" has been promoted to admin by ") + libcrtx_utility_coloredplayername(EventPlayer()));
	}
	return true;
}