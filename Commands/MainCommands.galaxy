// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Basic information command to brag about Cortex. xP
bool libcrtx_command_info(bool testConds, bool runActions) {
    if(!runActions) {
	return true;
    }

    libcrtx_writetext(PlayerGroupSingle(EventPlayer()), TextWithColor(StringToText("This map is powered by " + libcrtx_get_versionstring() + "."), Color(100, 0, 0)));
    return true;
}

bool libcrtx_command_minerals(bool testConds, bool runActions) {
    int minerals;

    if(!runActions) {
	return true;
    }

    minerals = StringToInt(StringWord(EventChatMessage(false), 2));
    if(minerals == 0) {
	minerals = 5000;
    }

    PlayerModifyPropertyInt( EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, minerals );
    return true;
}

bool libcrtx_command_gas(bool testConds, bool runActions) {
    int gas;

    if(!runActions) {
	return true;
    }

    gas = StringToInt(StringWord(EventChatMessage(false), 2));
    if(gas == 0) {
	gas = 5000;
    }
    PlayerModifyPropertyInt( EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, gas );
    return true;
}

bool libcrtx_command_commands(bool testConds, bool runActions) {
	libcrtx_write( PlayerGroupSingle(EventPlayer()), "Available commands: ");
	libcrtx_write( PlayerGroupSingle(EventPlayer()), libcrtx_command_list);
	return true;
}

bool libcrtx_command_colors(bool testConds, bool runActions) {
	text t;
	int i = 1;
	while( i != libcrtx_max_players ) {
		if( PlayerStatus(i) != c_playerStatusUnused ) {
			t = t + libcrtx_utility_coloredplayername(i);
			t = t + StringToText(" (" + libcrtx_utility_getcolorfromplayer(i) + ")");
			t = t + StringToText("<n/>                        ");
		}
		i = i + 1;
	}
	libcrtx_writetext( PlayerGroupSingle(EventPlayer()), t );
	return true;
}

bool libcrtx_command_zoom(bool testConds, bool runActions) {
	int height = StringToInt( StringWord(EventChatMessage(false), 2 ));
	if( height == 0 ) {
		// Reset
		CameraApplyInfo( EventPlayer(), CameraInfoDefault(), 2.0, -1, 10, false );
	} else {
		if(height > 100) {
			height = 100;
		} else if( height < 0 ) {
			height = 0;
		}
		CameraSetValue( EventPlayer(), c_cameraValueDistance, IntToFixed(height), 2.0, -1, 10 );
	}
	return true;
}

bool libcrtx_command_roll(bool testConds, bool runActions) {
	string snum = StringWord(EventChatMessage(false),2);
	string snumTo = StringWord(EventChatMessage(false),3);
	int tableHost;
	int tableGambler = 1;
	int winnings = 0;
	
	if(!runActions) {
	return true;
    }
	
	//Check if we have a xDy input format. -F
	if(StringContains(snum, "d", c_stringAnywhere, false)) {
		//We have xDy, check if a number of dice has been specified. -F
		if(StringSub(snum, 1, StringFind(snum,"d",false)-1) != "") {
			//We have a dice count, so let's find it, then run our randomizer loop. -F
			tableHost = StringToInt( StringSub( snum, 1, StringFind(snum,"d",false) - 1) );
			while(tableGambler > tableHost) {
				winnings = winnings + RandomInt(1,StringToInt( StringToInt( StringSub( snum, StringFind(snum,"d",false) + 1, StringLength(snum) ) ) ) );
				tableGambler = tableGambler + 1
			}
		} else {
			//We did not have a dice count, so our command actually looked more like Dy than xDy... let's just run one die then. -F
			winnings = RandomInt(1,StringToInt( StringToInt( StringSub( snum, StringFind(snum,"d",false) + 1, StringLength(snum) ) ) ) );
		}
		libcrtx_write(PlayerGroupSingle(EventPlayer()),"Rolled number: " + IntToString(winnings));
		return true;
	}
	
	//Did not have a xDy input format, check for second parameter. -F
	if(snumTo != "") {
		libcrtx_write(PlayerGroupSingle(EventPlayer()),"Rolled number: " + IntToString(RandomInt(StringToInt(snum),StringToInt(snumTo)));
		return true;
	} else if (snum != "") {
		libcrtx_write(PlayerGroupSingle(EventPlayer()),"Rolled number: " + IntToString(RandomInt(1,StringToInt(snum)));
		return true;
	}	//If we got this far, then something went horribly wrong. Or the player just didn't supply any parameters...
		//Shit happens. We could put a default roll here, but that'll have to be according to feeback. Or something.
		//Either way, our job here is done. At least for this instance of the function call. -F
	
	return true;
}