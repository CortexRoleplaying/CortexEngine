// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

bool libcrtx_command_ban(bool testConds, bool runActions)
{
	int player;
	unitgroup g;
	string val = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	player = libcrtx_color_to_player( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_moderator )) {
		return true;
	}

	GameOver( player, c_gameOverDefeat, false, true );
	g = UnitGroup( null, player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0 );
	UnitGroupLoopBegin(g);
	while( !UnitGroupLoopDone() )
	{
		UnitRemove( UnitGroupLoopCurrent() );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	
	libcrtx_write_text(PlayerGroupAll(), libcrtx_colored_player_name(player) + StringToText(" has been banned by ") + libcrtx_colored_player_name(EventPlayer()));
	return true;
}

bool libcrtx_command_disable(bool testConds, bool runActions)
{
	int player;
	string val = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	player = libcrtx_color_to_player( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_moderator )) {
		return true;
	}

	libcrtx_admin_disablecommands( player );
	
	libcrtx_write_text(PlayerGroupAll(), libcrtx_colored_player_name(player) + StringToText(" has had his commands disabled by ") + libcrtx_colored_player_name(EventPlayer()));
	return true;	
}

bool libcrtx_command_enable(bool testConds, bool runActions)
{
	int player;
	string val = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	player = libcrtx_color_to_player( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_moderator )) {
		return true;
	}

	libcrtx_admin_enablecommands( player );
	
	libcrtx_write_text(PlayerGroupAll(), libcrtx_colored_player_name(player) + StringToText(" has had his commands enabled by ") + libcrtx_colored_player_name(EventPlayer()));
	return true;	
}

bool libcrtx_command_promote(bool testConds, bool runActions)
{
	int player;
	string val = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	player = libcrtx_color_to_player( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_admin )) {
		return true;
	}

	libcrtx_admin_setpermission( player, libcrtx_admin_permissionlevel_moderator );
	
	libcrtx_write_text(PlayerGroupAll(), libcrtx_colored_player_name(player) + StringToText(" has been promoted to moderator by ") + libcrtx_colored_player_name(EventPlayer()));
	return true;	
}

bool libcrtx_command_demote(bool testConds, bool runActions)
{
	int player;
	string val = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	player = libcrtx_color_to_player( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_admin )) {
		return true;
	}

	libcrtx_admin_setpermission( player, libcrtx_admin_permissionlevel_none );
	
	libcrtx_write_text(PlayerGroupAll(), libcrtx_colored_player_name(player) + StringToText(" has been demoted to user by ") + libcrtx_colored_player_name(EventPlayer()));
	return true;	
}

bool libcrtx_command_adminremove(bool testConds, bool runActions)
{
	int player;
	unitgroup g;
	string val = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	player = libcrtx_color_to_player( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_moderator )) {
		return true;
	}

	g = UnitGroup( null, player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0 );
	UnitGroupLoopBegin(g);
	while( !UnitGroupLoopDone() )
	{
		if( UnitGetType( UnitGroupLoopCurrent() ) != libcrtx_getspawnertype() ) {
			UnitRemove( UnitGroupLoopCurrent() );
		}
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	
	libcrtx_write_text(PlayerGroupAll(), libcrtx_colored_player_name(player) + StringToText(" has been removed by ") + libcrtx_colored_player_name(EventPlayer()));
	return true;	
}

revealer[libcrtx_max_players] libcrtx_command_seeall_revealers;
bool libcrtx_command_seeall(bool testConds, bool runActions)
{
	int i = 1;
	string state;
	bool revealed;
	state = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	if( libcrtx_admin_getpermissions( EventPlayer() ) < libcrtx_admin_permissionlevel_moderator ) {
		return true;
	}

	if( state == "off" ) { 
		while( i != libcrtx_max_players ) {
			if( libcrtx_command_seeall_revealers[i] ) {
				VisRevealerDestroy( libcrtx_command_seeall_revealers[i] );
				libcrtx_command_seeall_revealers[i] = null;
			}
			i = i + 1;
		}
		libcrtx_write_text(PlayerGroupAll(), StringToText("The map has been hidden by ") + libcrtx_colored_player_name(EventPlayer()) + StringToText("."));
	} else if( state == "on" ) {
		while( i != libcrtx_max_players ) {
			if( libcrtx_command_seeall_revealers[i] == null ) {
				libcrtx_command_seeall_revealers[i] = VisRevealerCreate( i, RegionEntireMap() );
			}
			i = i + 1;
		}
		libcrtx_write_text(PlayerGroupAll(), StringToText("The map has been revealed by ") + libcrtx_colored_player_name(EventPlayer()) + StringToText("."));
	} else {
		// toggle.
		while( i != libcrtx_max_players ) {
			if( libcrtx_command_seeall_revealers[i] == null ) {
				libcrtx_command_seeall_revealers[i] = VisRevealerCreate( i, RegionEntireMap() );
				revealed = true;
			} else {
				VisRevealerDestroy( libcrtx_command_seeall_revealers[i] );
				libcrtx_command_seeall_revealers[i] = null;
				revealed = false;
			}
			i = i + 1;
		}
		
		if( revealed ) {
			libcrtx_write_text(PlayerGroupAll(), StringToText("The map has been revealed by ") + libcrtx_colored_player_name(EventPlayer()) + StringToText("."));
		} else {
			libcrtx_write_text(PlayerGroupAll(), StringToText("The map has been hidden by ") + libcrtx_colored_player_name(EventPlayer()) + StringToText("."));
		}
	}
	return true;	
}


bool libcrtx_command_smarthostile(bool check, bool run)
{
	string state;
	state = StringWord( libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	if( libcrtx_admin_getpermissions( EventPlayer() ) < libcrtx_admin_permissionlevel_moderator ) {
		return true;
	}

	if( state == "off" ) { 
		libcrtx_ai_stop();
		libcrtx_write_text(PlayerGroupAll(), StringToText("Smart Hostile computer has been disabled by ") + libcrtx_colored_player_name(EventPlayer()) + StringToText("."));
	} else if( state == "on" ) {
		libcrtx_ai_start();
		libcrtx_write_text(PlayerGroupAll(), StringToText("Smart Hostile computer has been enabled by ") + libcrtx_colored_player_name(EventPlayer()) + StringToText("."));
	} else {
		if( libcrtx_ai_is_enabled() ) {
			libcrtx_ai_stop();
			libcrtx_write_text(PlayerGroupAll(), StringToText("Smart Hostile computer has been disabled by ") + libcrtx_colored_player_name(EventPlayer()) + StringToText("."));
		} else {
			libcrtx_ai_start();
			libcrtx_write_text(PlayerGroupAll(), StringToText("Smart Hostile computer has been enabled by ") + libcrtx_colored_player_name(EventPlayer()) + StringToText("."));
		}
	}
	return true;
}

bool libcrtx_command_light(bool testConds, bool runActions)
{
	string light = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2);
	fixed blendTime = StringToFixed(StringWord(EventChatMessage(false), 3));
	
	if( libcrtx_admin_getpermissions( EventPlayer() ) < libcrtx_admin_permissionlevel_moderator )
	{
		return true;
	}

	if(light == "")
	{
		light = GameTerrainSet();
	}
	
	light = libcrtx_param_catalog(c_gameCatalogLight, light);
	if(light == null)
	{
		libcrtx_write(PlayerGroupSingle(EventPlayer()), "<c val=\"ff0000\">Unable to change lighting</c>: No such light exists.");
		return true;
	}

	if(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 3) == "")
	{
		blendTime = 2;
	}

	GameSetLighting(light, blendTime);

	return true;
}

bool libcrtx_command_fog(bool testConds, bool runActions)
{
	string state = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2 );
	string paramOne;
	string paramTwo;
	string paramThree;
	fixed red;
	fixed green;
	fixed blue;

	if( libcrtx_admin_getpermissions( EventPlayer() ) < libcrtx_admin_permissionlevel_moderator ) {
		return true;
	}
	
	paramOne = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 3);
	paramTwo = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 4);
	paramThree = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 5);

	if(state == "off")
	{ 
		FogSetEnabled(false);
	}
	else if(state == "on")
	{
		FogSetEnabled(true);
	}
	else if(state == "color")
	{
		red = libcrtx_boundsFixed(StringToFixed(paramOne), 0, 255) * 100 / 255;
		green = libcrtx_boundsFixed(StringToFixed(paramTwo), 0, 255) * 100 / 255;
		blue = libcrtx_boundsFixed(StringToFixed(paramThree), 0, 255) * 100 / 255;
		FogSetColor(Color(red, green, blue));
	}
	else if(state == "density")
	{
		FogSetDensity(StringToFixed(paramOne) / 100);
	}
	else if(state == "height")
	{
		FogSetStartHeight(StringToFixed(paramOne));
	}
	else if(state == "falloff")
	{
		FogSetFallOff(StringToFixed(paramOne) / 100);
	}
	else
	{
		libcrtx_write( PlayerGroupSingle(EventPlayer()), "Usage: !fog on/off/color/density/height/falloff value");
	}
	return true;
}

bool libcrtx_command_creepspeed(bool testConds, bool runActions)
{ 
	string state;
	fixed speed;
	state = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2);
	speed = StringToFixed(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 3));
	if( libcrtx_admin_getpermissions(EventPlayer()) < libcrtx_admin_permissionlevel_moderator )
	{
		return true;
	}

	if(speed >= 524287)
	{
	speed = 524287;
	}

	if( state == "growth" ) {
		CreepSetSpeed(c_creepSpeedGrowth, speed);
	} else if( state == "decay" ) {
		CreepSetSpeed(c_creepSpeedDecay, speed);
	} else if( state == "blend" ) {
		CreepSetSpeed(c_creepSpeedBlend, speed);
	} else {
		speed = StringToFixed(state);
		if(state == "")
		{
			libcrtx_write( PlayerGroupSingle(EventPlayer()), "Usage: !creepspeed [growth/decay/blend] <speed>");
			return true;
		}
		CreepSetSpeed(c_creepSpeedGrowth, speed);
		CreepSetSpeed(c_creepSpeedDecay, speed);
		CreepSetSpeed(c_creepSpeedBlend, speed);
	}
	libcrtx_write_text(PlayerGroupAll(),  StringToText("Creep speed has been set to ") +
		FixedToText(speed, 0) + StringToText(" by ") + libcrtx_colored_player_name(EventPlayer()));
	return true;	
}