// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

bool libcrtx_command_ban(bool testConds, bool runActions)
{
	int player;
	unitgroup g;
	string val = StringWord( EventChatMessage(false), 2 );
	player = libcrtx_utility_getplayerfromcolor( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_moderator )) {
		return true;
	}

	GameOver( player, c_gameOverDefeat, false, false );
	g = UnitGroup( null, player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0 );
	UnitGroupLoopBegin(g);
	while( !UnitGroupLoopDone() )
	{
		UnitRemove( UnitGroupLoopCurrent() );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	
	libcrtx_writetext(PlayerGroupAll(), libcrtx_utility_coloredplayername(player) + StringToText(" has been banned by ") + libcrtx_utility_coloredplayername(EventPlayer()));
	return true;
}

bool libcrtx_command_disable(bool testConds, bool runActions)
{
	int player;
	string val = StringWord( EventChatMessage(false), 2 );
	player = libcrtx_utility_getplayerfromcolor( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_moderator )) {
		return true;
	}

	libcrtx_admin_disablecommands( player );
	
	libcrtx_writetext(PlayerGroupAll(), libcrtx_utility_coloredplayername(player) + StringToText(" has had his commands disabled by ") + libcrtx_utility_coloredplayername(EventPlayer()));
	return true;	
}

bool libcrtx_command_enable(bool testConds, bool runActions)
{
	int player;
	string val = StringWord( EventChatMessage(false), 2 );
	player = libcrtx_utility_getplayerfromcolor( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_moderator )) {
		return true;
	}

	libcrtx_admin_enablecommands( player );
	
	libcrtx_writetext(PlayerGroupAll(), libcrtx_utility_coloredplayername(player) + StringToText(" has had his commands enabled by ") + libcrtx_utility_coloredplayername(EventPlayer()));
	return true;	
}

bool libcrtx_command_promote(bool testConds, bool runActions)
{
	int player;
	string val = StringWord( EventChatMessage(false), 2 );
	player = libcrtx_utility_getplayerfromcolor( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_admin )) {
		return true;
	}

	libcrtx_admin_setpermission( player, libcrtx_admin_permissionlevel_moderator );
	
	libcrtx_writetext(PlayerGroupAll(), libcrtx_utility_coloredplayername(player) + StringToText(" has been promoted to moderator by ") + libcrtx_utility_coloredplayername(EventPlayer()));
	return true;	
}

bool libcrtx_command_demote(bool testConds, bool runActions)
{
	int player;
	string val = StringWord( EventChatMessage(false), 2 );
	player = libcrtx_utility_getplayerfromcolor( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_admin )) {
		return true;
	}

	libcrtx_admin_setpermission( player, libcrtx_admin_permissionlevel_none );
	
	libcrtx_writetext(PlayerGroupAll(), libcrtx_utility_coloredplayername(player) + StringToText(" has been demoted to user by ") + libcrtx_utility_coloredplayername(EventPlayer()));
	return true;	
}

bool libcrtx_command_adminremove(bool testConds, bool runActions)
{
	int player;
	unitgroup g;
	string val = StringWord( EventChatMessage(false), 2 );
	player = libcrtx_utility_getplayerfromcolor( val );
	if( player == -1 ) {
		return true;
	}

	if( !libcrtx_admin_haspermissions( EventPlayer(), player, libcrtx_admin_permissionlevel_moderator )) {
		return true;
	}

	g = UnitGroup( null, player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0 );
	UnitGroupLoopBegin(g);
	while( !UnitGroupLoopDone() )
	{
		if( UnitGetType( UnitGroupLoopCurrent() ) != libcrtx_getspawnertype() ) {
			UnitRemove( UnitGroupLoopCurrent() );
		}
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	
	libcrtx_writetext(PlayerGroupAll(), libcrtx_utility_coloredplayername(player) + StringToText(" has been removed by ") + libcrtx_utility_coloredplayername(EventPlayer()));
	return true;	
}

revealer[libcrtx_max_players] libcrtx_command_seeall_revealers;
bool libcrtx_command_seeall(bool testConds, bool runActions)
{
	int i = 1;
	string state;
	state = StringWord( EventChatMessage(false), 2 );
	if( libcrtx_admin_getpermissions( EventPlayer() ) < libcrtx_admin_permissionlevel_moderator ) {
		return true;
	}

	if( state == "off" ) { 
		while( i != libcrtx_max_players ) {
			if( libcrtx_command_seeall_revealers[i] ) {
				VisRevealerDestroy( libcrtx_command_seeall_revealers[i] );
				libcrtx_command_seeall_revealers[i] = null;
			}
			i = i + 1;
		}
	} else if( state == "on" ) {
		while( i != libcrtx_max_players ) {
			if( libcrtx_command_seeall_revealers[i] == null ) {
				libcrtx_command_seeall_revealers[i] = VisRevealerCreate( i, RegionEntireMap() );
			}
			i = i + 1;
		}
	} else {
		// toggle.
		while( i != libcrtx_max_players ) {
			if( libcrtx_command_seeall_revealers[i] == null ) {
				libcrtx_command_seeall_revealers[i] = VisRevealerCreate( i, RegionEntireMap() );
			} else {
				VisRevealerDestroy( libcrtx_command_seeall_revealers[i] );
				libcrtx_command_seeall_revealers[i] = null;
			}
			i = i + 1;
		}
	}
	return true;	
}