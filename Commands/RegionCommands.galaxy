// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

bool libcrtx_command_regioncreate(bool checkConds, bool runActions)
{
	region r;
	fixed radius;
	string name;
	
	name = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2);
	radius = StringToFixed(StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 3));
	if( radius == 0.0 ) {
		radius = 2;
	}

	if( DataTableGetRegion( true, libcrtx_command_region_buildidentifier(name) ) ) {
		libcrtx_write_error("A region with that name already exists!");
		return true;
	}

	r = RegionCircle( UnitGetPosition(libcrtx_spawner()), radius );

	// and save it…
	DataTableSetRegion( true, libcrtx_command_region_buildidentifier(name), r );

	libcrtx_write_success("Region \"" + name + "\" has been created.");
	return true;
}

bool libcrtx_command_regionremove(bool checkConds, bool runActions)
{
	string name = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2);

	if( DataTableGetRegion( true, libcrtx_command_region_buildidentifier(name) ) ) {
		DataTableValueRemove( true, libcrtx_command_region_buildidentifier(name) );
		//Check if this region, "Region A" for convenience, was linked to another region for teleportation.
		if(DataTableValueExists(true, libcrtx_command_region_buildidentifier(name)+"_link")) {
			// We have a link! Let's purge everything with holy fire! Or a handy native and some tricky code.
			//
			// Basically, we need to destroy everything from Region A to the region it's linked to (which we'll call "B").
			// But we don't want to destroy B itself! So we first use A's link to B again to find B's name.
			// Then we append the "_link" suffix to B's name, use it to get the link from B to A, and use that to destroy the value that B used to get A's name.
			DataTableValueRemove(true,"region_guid_" + IntToString(DataTableGetInt(true,DataTableGetString(true,"region_guid_" + IntToString(DataTableGetInt(true,libcrtx_command_region_buildidentifier(name)+"_link"))) + "_link")));
			
			// Now that we did the single most confusing leapfrogging function call I've ever written, we need to backtrack our way a little.
			// This time, we do the same process, but stop at the link from B to A we used above and destroy it instead of using it.
			DataTableValueRemove(true,DataTableGetString(true,"region_guid_" + IntToString(DataTableGetInt(true,libcrtx_command_region_buildidentifier(name)+"_link"))) + "_link");
			
			// We've finally destroyed the chain from B to A. Now we need to destroy the chain from A to B.
			// Again, first comes the data that A uses to find B's name. Which means we're basically backtracking one step again.
			DataTableValueRemove(true,"region_guid_" + IntToString(DataTableGetInt(true,libcrtx_command_region_buildidentifier(name)+"_link")));
			
			// One less backtrack, this time to directly destroy A's link to B. 
			DataTableValueRemove(true,libcrtx_command_region_buildidentifier(name)+"_link");
			// We're finally done! All the links between A and B are gone, and since we've already destroyed A itself before even entering this IF block,
			// our job here is done. Someone should rewrite this stuff seomday to not be so incredibly leapfroggy and nested.
		}
		
		libcrtx_write_success("Region \"" + name + "\" has been removed.");
	} else {
		libcrtx_write_error("No region with that name exists!");
	}
	
	return true;
}

bool libcrtx_command_regionremoveall(bool checkConds, bool runActions)
{
	int dataCount = 1;
	int removeCount = 0;
	
	//Remove everything that uses the region prefix or the region guid prefix.
	//This will remove everything including links between regions. -F
	while( dataCount <= DataTableValueCount(true)) {
		if(StringSub(DataTableValueName(true,dataCount),1,StringLength(libcrtx_command_region_buildidentifier(""))) == libcrtx_command_region_buildidentifier("")) {
			//This entry was either a region or a link to a region name. Remove it. -F
			DataTableValueRemove(true,DataTableValueName(true,dataCount));
			removeCount = removeCount + 1;
		} else if(StringSub(DataTableValueName(true,dataCount),1,StringLength("region_guid_")) == "region_guid_") {
			//This entry was a region name used by a region link. Remove it. -F
			DataTableValueRemove(true,DataTableValueName(true,dataCount));
			removeCount = removeCount + 1;
		}
		dataCount = dataCount + 1;
	}
	
	if(removeCount) {
		libcrtx_write_success("All your regions have been removed.");
	} else {
		libcrtx_write_error("You have no regions to remove.");
	}
	
	return true;
}

bool libcrtx_command_regionlist(bool checkConds, bool runActions)
{
	int dataCount = 1;
	int regionCount = 0;
	string regList;
	
	while( dataCount <= DataTableValueCount(true)) {
		//If the name of this entry begins with the region prefix, and doesn't have the _link suffix for teleports, then this is one of the regions we want.
		if( StringSub( DataTableValueName(true,dataCount) , 1 , StringLength(libcrtx_command_region_buildidentifier("")) ) == libcrtx_command_region_buildidentifier("")
				&& StringSub( DataTableValueName(true,dataCount) , StringLength(DataTableValueName(true,dataCount))-4 , StringLength(DataTableValueName(true,dataCount)) ) != "_link") 
		{
			if(regionCount == 0) {
			regList = StringSub(DataTableValueName(true,dataCount),StringLength(libcrtx_command_region_buildidentifier(""))+1,StringLength(DataTableValueName(true,dataCount)));
			} else {
			regList = regList + ", " + StringSub(DataTableValueName(true,dataCount),StringLength(libcrtx_command_region_buildidentifier(""))+1,StringLength(DataTableValueName(true,dataCount)));
			}
			regionCount = regionCount + 1;
		}
		dataCount = dataCount + 1;
	}
	
	if(regionCount) {
		libcrtx_write(PlayerGroupSingle(EventPlayer()), regList);
	} else {
		libcrtx_write(PlayerGroupSingle(EventPlayer()),"You have no regions.");
	}
	
	return true;
}

bool libcrtx_command_teleport(bool checkConds, bool runActions)
{
	trigger t;

	string rn1;
	string rn2;

	string rl1;
	string rl2;

	region r1;
	region r2;

	int g1;
	int g2;

	// Take two regions we own, and read 'em.
	rn1 = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 2);
	rn2 = StringWord(libcrtx_chat_get_parse_line(EventPlayer()), 3);
	
	rn1 = libcrtx_command_region_buildidentifier(rn1);
	rn2 = libcrtx_command_region_buildidentifier(rn2);

	if(DataTableValueExists(true, libcrtx_command_region_buildidentifier(rn1)+"_link")) {
			// We have a link! Let's purge everything with holy fire! Or a handy native and some tricky code.
			//
			// Basically, we need to destroy everything from Region A to the region it's linked to (which we'll call "B").
			// But we don't want to destroy B itself! So we first use A's link to B again to find B's name.
			// Then we append the "_link" suffix to B's name, use it to get the link from B to A, and use that to destroy the value that B used to get A's name.
			DataTableValueRemove(true,"region_guid_" + IntToString(DataTableGetInt(true,DataTableGetString(true,"region_guid_" + IntToString(DataTableGetInt(true,libcrtx_command_region_buildidentifier(rn1)+"_link"))) + "_link")));
			
			// Now that we did the single most confusing leapfrogging function call I've ever written, we need to backtrack our way a little.
			// This time, we do the same process, but stop at the link from B to A we used above and destroy it instead of using it.
			DataTableValueRemove(true,DataTableGetString(true,"region_guid_" + IntToString(DataTableGetInt(true,libcrtx_command_region_buildidentifier(rn1)+"_link"))) + "_link");
			
			// We've finally destroyed the chain from B to A. Now we need to destroy the chain from A to B.
			// Again, first comes the data that A uses to find B's name. Which means we're basically backtracking one step again.
			DataTableValueRemove(true,"region_guid_" + IntToString(DataTableGetInt(true,libcrtx_command_region_buildidentifier(rn1)+"_link")));
			
			// One less backtrack, this time to directly destroy A's link to B. 
			DataTableValueRemove(true,libcrtx_command_region_buildidentifier(rn1)+"_link");
			// We're finally done! All the links between A and B are gone, and since we've already destroyed A itself before even entering this IF block,
			// our job here is done. Someone should rewrite this stuff seomday to not be so incredibly leapfroggy and nested.
	}
	
	r1 = DataTableGetRegion(true, rn1);
	r2 = DataTableGetRegion(true, rn2);
	
	if( r1 == null || r2 == null ) {
		libcrtx_write_error("One or more invalid regions were entered.");
		return true;
	}

	rl1 = rn1 + "_link";
	rl2 = rn2 + "_link";

	// Link the regions to their counterparts.
	// Add regions to the global region index
	DataTableSetRegion(true, IntToString(libcrtx_region_guid_counter), r1);
	DataTableSetString(true, "region_guid_" + IntToString(libcrtx_region_guid_counter), rn1);
	g1 = libcrtx_region_guid_counter;
	libcrtx_region_guid_counter = libcrtx_region_guid_counter + 1;
	DataTableSetRegion(true, IntToString(libcrtx_region_guid_counter), r2);
	DataTableSetString(true, "region_guid_" + IntToString(libcrtx_region_guid_counter), rn2);
	g2 = libcrtx_region_guid_counter;
	libcrtx_region_guid_counter = libcrtx_region_guid_counter + 1;

	// Link 'em together!
	DataTableSetInt(true, rl1, g2);
	DataTableSetInt(true, rl2, g1);

	t = TriggerCreate("libcrtx_event_unit_enter_region");
	TriggerAddEventUnitRegion( t, null, r1, true );
	TriggerAddEventUnitRegion( t, null, r1, false );
	TriggerAddEventUnitRegion( t, null, r2, true );
	TriggerAddEventUnitRegion( t, null, r2, false );
	return true;
}