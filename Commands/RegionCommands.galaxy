// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

bool libcrtx_command_regioncreate(bool checkConds, bool runActions)
{
	region r;
	fixed radius;
	string name;
	
	name = StringWord(EventChatMessage(false), 2);
	radius = StringToFixed(StringWord(EventChatMessage(false), 3));
	if( radius == 0.0 ) {
		radius = 2;
	}

	if( DataTableGetRegion( true, libcrtx_command_region_buildidentifier(name) ) ) {
		libcrtx_writelocalerror("A region with that name already exists!");
		return true;
	}

	r = RegionCircle( UnitGetPosition(libcrtx_utility_getspawner()), radius );

	// and save it…
	DataTableSetRegion( true, libcrtx_command_region_buildidentifier(name), r );

	libcrtx_writelocalsuccess("Region \"" + name + "\" has been created.");
	return true;
}

bool libcrtx_command_regionremove(bool checkConds, bool runActions)
{
	string name = StringWord(EventChatMessage(false), 2);

	if( DataTableGetRegion( true, libcrtx_command_region_buildidentifier(name) ) ) {
		DataTableValueRemove( true, libcrtx_command_region_buildidentifier(name) );
		libcrtx_writelocalsuccess("Region \"" + name + "\" has been removed.");
	} else {
		libcrtx_writelocalerror("No region with that name exists!");
	}
	
	return true;
}

bool libcrtx_command_regionremoveall(bool checkConds, bool runActions)
{
	int dataCount = 1;
	int removeCount = 0;
	
	while( dataCount <= DataTableValueCount(true)) {
		if(StringSub(DataTableValueName(true,dataCount),1,StringLength(libcrtx_command_region_buildidentifier(""))) == libcrtx_command_region_buildidentifier("")) {
			DataTableValueRemove(true,DataTableValueName(true,dataCount));
			removeCount = removeCount + 1
		}
		dataCount = dataCount + 1
	}
	
	if(removeCount) {
		libcrtx_write(PlayerGroupSingle(EventPlayer()),"All your regions have been removed.");
	} else {
		libcrtx_write(PlayerGroupSingle(EventPlayer()),"You have no regions to remove.");
	}
	
	return true;
}

bool libcrtx_command_regionlist(bool checkConds, bool runActions)
{
	int dataCount = 1;
	int regionCount = 0;
	string regList;
	
	while( dataCount <= DataTableValueCount(true)) {
		if(StringSub(DataTableValueName(true,dataCount),1,StringLength(libcrtx_command_region_buildidentifier(""))) == libcrtx_command_region_buildidentifier("")) {
			regList = regList + StringSub(DataTableValueName(true,dataCount),StringLength(libcrtx_command_region_buildidentifier("")+1,StringLength(DataTableValueName(true,dataCount))));
			regionCount = regionCount + 1
			if(dataCount != DataTableValueCount(true) {
				regList = regList + ", ";
			}
		}
		dataCount = dataCount + 1
	}
	
	if(regionCount) {
		libcrtx_write(PlayerGroupSingle(EventPlayer()), regList);
	} else {
		libcrtx_write(PlayerGroupSingle(EventPlayer()),"You have no regions.");
	}
	
	return true;
}

bool libcrtx_command_teleport(bool checkConds, bool runActions)
{
	trigger t;

	string rn1;
	string rn2;

	string rl1;
	string rl2;

	region r1;
	region r2;

	int g1;
	int g2;

	// Take two regions we own, and read 'em.
	rn1 = StringWord(EventChatMessage(false), 2);
	rn2 = StringWord(EventChatMessage(false), 3);
	
	rn1 = libcrtx_command_region_buildidentifier(rn1);
	rn2 = libcrtx_command_region_buildidentifier(rn2);
	
	r1 = DataTableGetRegion(true, rn1);
	r2 = DataTableGetRegion(true, rn2);
	
	if( r1 == null || r2 == null ) {
		libcrtx_writelocalerror("One or more invalid regions were entered.");
		return true;
	}

	rl1 = rn1 + "_link";
	rl2 = rn2 + "_link";

	// Link the regions to their counterparts.
	// Add regions to the global region index
	DataTableSetRegion(true, IntToString(libcrtx_region_guid_counter), r1);
	DataTableSetString(true, "region_guid_" + IntToString(libcrtx_region_guid_counter), rn1);
	g1 = libcrtx_region_guid_counter;
	libcrtx_region_guid_counter = libcrtx_region_guid_counter + 1;
	DataTableSetRegion(true, IntToString(libcrtx_region_guid_counter), r2);
	DataTableSetString(true, "region_guid_" + IntToString(libcrtx_region_guid_counter), rn2);
	g2 = libcrtx_region_guid_counter;
	libcrtx_region_guid_counter = libcrtx_region_guid_counter + 1;

	// Link 'em together!
	DataTableSetInt(true, rl1, g2);
	DataTableSetInt(true, rl2, g1);

	t = TriggerCreate("libcrtx_event_unit_enter_region");
	TriggerAddEventUnitRegion( t, null, r1, true );
	TriggerAddEventUnitRegion( t, null, r1, false );
	TriggerAddEventUnitRegion( t, null, r2, true );
	TriggerAddEventUnitRegion( t, null, r2, false );
	return true;
}