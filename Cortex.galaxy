// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2011 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

include "Cortex/Common/Global.galaxy"
include "Cortex/Toolkit/Toolkit.galaxy"
include "Cortex/Chat/Chat.galaxy"
include "Cortex/Events/Events.galaxy"
include "Cortex/Commands/Commands.galaxy"

bool libcrtx_MapCheck()
{
	bool r = true;
	// Check for map configuration errors that will degrade quality.

	if( MeleeGetOption(1, c_meleeOptionDefeat) || MeleeGetOption(1, c_meleeOptionVictory) ) {
		libcrtx_write(PlayerGroupAll(), "Melee trigger usage has been detected.");
		r = false;
	}

	if( PlayerType(libcrtx_setting_getint(libcrtx_setting_int_neutralcomputer)) != c_playerTypeNeutral ) {
		libcrtx_write(PlayerGroupAll(), "Incorrect neutral player settings.");
		r = false;
	}

	if( PlayerType(libcrtx_setting_getint(libcrtx_setting_int_hostilecomputer)) != c_playerTypeHostile ) {
		libcrtx_write(PlayerGroupAll(), "Incorrect hostile player settings.");
		r = false;
	}

	if( PlayerType(libcrtx_setting_getint(libcrtx_setting_int_smarthostile)) != c_playerTypeComputer ) {
		libcrtx_write(PlayerGroupAll(), "Incorrect smarthostile player settings.");
		r = false;
	}
	
	if( !r ) {
		libcrtx_write(PlayerGroupAll(), "One or more errors detected. Cortex has failed to startup.");
		libcrtx_write(PlayerGroupAll(), "Engine Version: " + libcrtx_get_versionstring());
		libcrtx_write_text(PlayerGroupAll(), StringToText("Please correct your map settings, or contact the author of ") + GameMapName() );
	}

	return r;
}

void libcrtx_InitLib()
{
	libcrtx_set_debug_mode(false); // must be changed for release.

	libcrtx_debug("cortex_init()");
	// init dependencies
	libactionbar_init();
	libHash_InitLib();

	// cortex main init.
	libcrtx_settings_initdefault();

	if( libcrtx_MapCheck() ) {
		libcrtx_toolkit_init();
		libcrtx_commands_init();
		libcrtx_chat_init();
		libcrtx_admin_init();
		libcrtx_events_init();
	}
}
