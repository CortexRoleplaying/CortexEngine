// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

const int libcrtx_chat_recursion_limit = 50;

// Context
unitgroup[libcrtx_max_players] libcrtx_chat_current_context;

// Parse Lines:
// These commands are the basic, Cortex-supplied commands and language syntax.
// Ex: sp 3 marine; sp immortal; translates to two parse lines:
// @spawn 3 marine and
// @spawn immortal.

// Set the current parse line.
void libcrtx_chat_set_parse_line(int player, string s)
{
	libcrtx_chat_current_msg[player] = s;
}

// The current local parse line, in it's most basic form.
string libcrtx_chat_get_parse_line(int player)
{
	return libcrtx_chat_current_msg[player];
}

// Redirect a command to execute another command.
void libcrtx_chat_parsechat(int lp_player, string lp_message, int lp_recursionLimit);
void libcrtx_chat_redirect_command(int player, string command, string params)
{
	libcrtx_chat_parsechat(player, command + " " + params, libcrtx_chat_recursion_limit);
}

// Set the current context of a command for a player
void libcrtx_chat_set_context(int player, unitgroup c)
{
	libcrtx_chat_current_context[player] = c;
}

unitgroup libcrtx_chat_get_context(int player)
{
	return libcrtx_enforce_unit_permissions(libcrtx_chat_current_context[player]);
}

// Returns the parameter at the given index.
// Indexing starts at 2. (1 is the command being used)
string libcrtx_param_index(int index)
{
	return StringWord(libcrtx_chat_get_parse_line(EventPlayer()), index);
}

// Returns all parameters
string libcrtx_param_all()
{
	string msg = libcrtx_chat_get_parse_line(EventPlayer());
	return StringSub(msg, StringFind(msg, " ", c_stringCase) + 1, StringLength(msg));
}

// Takes the given word and finds it in the catalog.
// If it is not in the catalog, returns null.
string libcrtx_param_catalog(int catalog, string word)
{
	int i;
	string test;
	string result = null;

	if(CatalogEntryIsValid(catalog, word))
	{
		return word;
	}
	
	i = CatalogEntryCount(catalog);
	while(i != 0)
	{
		test = CatalogEntryGet(catalog, i);
		if(StringEqual(test, word, c_stringNoCase))
		{
			result = test;
			return result;
		}
		i = i - 1;
	}

	i = CatalogEntryCount(catalog);
	while(i != 0)
	{
		test = CatalogEntryGet(catalog, i);
		if(StringContains(test, word, c_stringBegin, c_stringNoCase))
		{
			result = test;
			break;
		}
		i = i - 1;
	}

	return result;
}

// Takes the given word and translates it into a region.
// If more than one word is given, then it searches for the #
// If not possible, returns null.
region libcrtx_param_get_region(string word)
{
	string rgnName = null;
	int i = 0;

	if(word == "")
	{
		return null;
	}

	if (StringContains(word, " ", c_stringAnywhere, c_stringCase))
	{
		while(StringWord(word, i) != "")
		{
			if (StringContains(StringWord(word, i), "#", c_stringBegin, c_stringCase))
			{
				rgnName = StringWord(word, i);
				break;
			}
			i = i + 1;
		}

		if(rgnName == null)
		{
			return null;
		}
	}
	else
	{
		rgnName = word;
	}

	if (StringContains(rgnName, "#", c_stringBegin, c_stringCase))
	{
		rgnName = StringSub(rgnName, 2, StringLength(rgnName));
	}
	rgnName = libcrtx_command_region_buildidentifier(rgnName);

	if(DataTableValueExists(true, libcrtx_command_region_buildidentifier(rgnName) + "_link"))
	{
		return DataTableGetRegion(true, libcrtx_command_region_buildidentifier(rgnName) + "_link");
	}
	else
	{
		return DataTableGetRegion(true, rgnName);
	}
}

