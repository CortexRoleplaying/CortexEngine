// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

void libcrtx_chat_init()
{
	int i = 1;

	// Create trigger for player chat messages
	trigger t = TriggerCreate("libcrtx_chat_receivedevent");

	// Register chat msg events
	while( i < libcrtx_max_players )
	{
		TriggerAddEventChatMessage(t, i, "", false);
		if( PlayerStatus(i) == c_playerStatusActive ) {
			libcrtx_alias_banks[i] = BankLoad( libcrtx_bank_prefix + "alias", i );
		}
		i = i + 1;
	}
}

bool libcrtx_chat_parsechat(int lp_player, string lp_message)
{
	trigger t;
	int spaceIndex;
	int currentCmd = 0;
	string sub = "";
	bool commandFound = false;

	libcrtx_debug("libcrtx_chat_parsechat()");

	// disabled players: all chat is routed to OOC.
	if( libcrtx_admin_isplayerdisabled(lp_player) ) {
		return false;
	}

	spaceIndex = StringFind( lp_message, " ", c_stringCase );
	if( spaceIndex == 0 ) { 
		spaceIndex = StringLength( lp_message );
	} else {
		spaceIndex = spaceIndex - 1;
	}
	sub = StringSub(lp_message, 1, spaceIndex);

	// alias system, if we're running an alias command, stop, no need to do more.
	if( libcrtx_alias_exists( sub ) ) {
		sub = libcrtx_alias_getsource(sub);
	}

	// convert to lowercase.
	sub = StringCase(sub, false);

	t = DataTableGetTrigger( true, "libcrtx_commands_" + sub );
	if( t )
	{
		libcrtx_chat_set_parse_line( lp_player, lp_message );
		TriggerExecute(t, false, false);
		commandFound = true;
	}

	return commandFound;
}

bool libcrtx_chat_receivedevent(bool testConds, bool runActions)
{
	text t;
	int i;
	int x;
	int l;
	string c;
	string s;
	bool isCmd = false;
	int triggerPlayer = EventPlayer();
	string chatMsg = EventChatMessage(false);

	if(!runActions)
	{
		return true;
	}

	l = 1;
	x = 1;
	while( x != StringLength(chatMsg) ) {
		s = StringSub(chatMsg, x, x);
		if( s == ";" ) { 
			// Everything from here on backwards, new command!
			c = StringSub(chatMsg, l, x-1);
			c = libcrtx_string_trim( c );
			libcrtx_chat_parsechat( triggerPlayer, c );
			l = x+1;
		}
		x = x + 1;

		if( x >= StringLength(chatMsg) ) {
			if( StringSub(chatMsg, StringLength(chatMsg), StringLength(chatMsg)) == ";" ) {
				c = StringSub(chatMsg, l, StringLength(chatMsg)-1);
			} else {
				c = StringSub(chatMsg, l, StringLength(chatMsg));
			}
			c = libcrtx_string_trim( c );
			libcrtx_chat_parsechat( triggerPlayer, c );
			l = x+1;
		}
	}
	if( l != 1 ) {
		return true;
	}

	isCmd = libcrtx_chat_parsechat( triggerPlayer, chatMsg );

	// Clear everyone's chat of the filth. FILTH I SAY.
	UIClearMessages( PlayerGroupAll(), c_messageAreaChat );

	if( !isCmd )
	{
		t = libcrtx_utility_colortextbyplayer( EventPlayer(), PlayerName( EventPlayer() ) + StringToText(" (OOC)") );
		s = ": " + EventChatMessage(false);
		t = t + StringToText(s);
		// And now we write the pretty OOC chat!
		libcrtx_writetext(PlayerGroupAll(), t);
		
	}
	return true;			
}