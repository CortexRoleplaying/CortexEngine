// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

void libcrtx_chat_init()
{
	int i = 1;

	// Create trigger for player chat messages
	trigger t = TriggerCreate("libcrtx_chat_receivedevent");

	// Register chat msg events
	while( i < libcrtx_max_players )
	{
		TriggerAddEventChatMessage(t, i, "", false);
		if( PlayerStatus(i) == c_playerStatusActive ) {
			libcrtx_alias_banks[i] = BankLoad( libcrtx_bank_prefix + "alias", i );
		}
		i = i + 1;
	}
}

bool libcrtx_chat_parsechat(int lp_player, string lp_message, int lp_recursionLimit)
{
	trigger t;
	int spaceIndex;
	int currentCmd = 0;
	string sub = "";
	int l;
	int x;
	string c;
	string s;
	bool aliasCreate;
	bool commandFound = false;

	if( lp_recursionLimit == libcrtx_chat_recursion_limit ) {
		// This is the original command as issued before it's broken down.
		// Reset our context to the default.
		libcrtx_chat_set_context( lp_player, libcrtx_utility_getselectedunits() );
		libcrtx_variable_assign_group( lp_player, libcrtx_variable_name_original_selection, libcrtx_utility_getselectedunits() );
		libcrtx_variable_assign_group( lp_player, libcrtx_variable_name_all_spawned, UnitGroupEmpty() );
	}
	
	if( lp_recursionLimit == 0 ) {
		return true;
	}
	lp_recursionLimit = lp_recursionLimit - 1;

	libcrtx_debug("libcrtx_chat_parsechat()");

	// disabled players: all chat is routed to OOC.
	if( libcrtx_admin_isplayerdisabled(lp_player) ) {
		return false;
	}

	// Parse normally so we don't have to escape the ;'s
	if( StringEqual(StringSub(lp_message, 1, 12), "alias create", false) ) {
		aliasCreate = true;
	}

	l = 1;
	x = 1;
	while( x <= StringLength(lp_message) && !aliasCreate ) {
		s = StringSub(lp_message, x, x);

		if( x >= StringLength(lp_message) ) {
			if( StringSub(lp_message, StringLength(lp_message), StringLength(lp_message)) == ";" ) {
				c = StringSub(lp_message, l, StringLength(lp_message)-1);
			} else {
				c = StringSub(lp_message, l, StringLength(lp_message));
			}
			lp_message = libcrtx_string_trim( c );
			l = 1;
			// This part finishes the recursion and runs us through the regular non-recursive parser.
		} else if( s == ";" && StringSub(lp_message, x-1, x-1) != "\\" ) { 
			// Everything from here on backwards, new command!
			c = StringSub(lp_message, l, x-1);
			c = libcrtx_string_trim( c );
			libcrtx_chat_parsechat( lp_player, c, lp_recursionLimit );
			l = x+1;
		}
		x = x + 1;
	}
	if( l != 1 ) {
		// Using recursion: skip!
		return true;
	}

	// Strip out all escaped semicolons
	x = 1;
	while( x <= StringLength(lp_message) ) {
		if( StringSub(lp_message, x, x) == ";" ) {
			if( StringSub(lp_message, x-1, x-1) == "\\" ) {
				// We must remove these!
				s = StringSub(lp_message, 1, x-2);
				lp_message = s + StringSub(lp_message, x, StringLength(lp_message));
				x = 1; // Restart!
	 		}
		}
		x = x + 1;
	}

	spaceIndex = StringFind( lp_message, " ", c_stringCase );
	if( spaceIndex == 0 ) { 
		spaceIndex = StringLength( lp_message );
	} else {
		spaceIndex = spaceIndex - 1;
	}
	sub = StringSub(lp_message, 1, spaceIndex);

	// alias system, if we're running an alias command, stop, no need to do more.
	if( libcrtx_alias_exists( sub ) ) {
		sub = libcrtx_alias_getsource(sub);
		// Rewrite this and re-parse recursively.
		// We must do this to ensure that complex aliases will function.
		lp_message = sub + " " + StringSub(lp_message, StringFind( lp_message, " ", c_stringCase ), StringLength(lp_message));
		libcrtx_chat_parsechat( lp_player, lp_message, lp_recursionLimit );
		return true;
	}

	// Check every word for aliases.
	x = 2;
	while( StringWord(lp_message, x) != "" ) {
		s = StringWord(lp_message, x);
		if( libcrtx_alias_exists(s) ) { 
			lp_message = StringReplaceWord( lp_message, s, libcrtx_alias_getsource(s), c_stringReplaceAll, false );
			libcrtx_chat_parsechat( lp_player, lp_message, lp_recursionLimit - 1 );
			return true;
		}
		x = x + 1;
	}

	// convert to lowercase.
	sub = StringCase(sub, false);

	t = DataTableGetTrigger( true, "libcrtx_commands_" + sub );
	if( t )
	{
		libcrtx_chat_set_parse_line( lp_player, lp_message );
		TriggerExecute(t, false, false);
		commandFound = true;
	}

	return commandFound;
}

bool libcrtx_chat_receivedevent(bool testConds, bool runActions)
{
	text t;
	int i;
	int x;
	int l;
	string c;
	string s;
	bool isCmd = false;
	int triggerPlayer = EventPlayer();
	string chatMsg = EventChatMessage(false);
	chatMsg = libcrtx_string_trim(chatMsg);

	if(!runActions)
	{
		return true;
	}

	isCmd = libcrtx_chat_parsechat( triggerPlayer, chatMsg, libcrtx_chat_recursion_limit );

	// Clear everyone's chat of the filth. FILTH I SAY.
	UIClearMessages( PlayerGroupAll(), c_messageAreaChat );

	if( !isCmd )
	{
		t = libcrtx_utility_colortextbyplayer( EventPlayer(), PlayerName( EventPlayer() ) + StringToText(" (OOC)") );
		s = ": " + EventChatMessage(false);
		t = t + StringToText(s);
		// And now we write the pretty OOC chat!
		libcrtx_writetext(PlayerGroupAll(), t);
		
	}
	return true;			
}