// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// This will only return the units that are owned by the current player
// OR, they are hostile/neutral units.
unitgroup libcrtx_enforce_unit_permissions(unitgroup g)
{
    unit u;
    int count;
    count = UnitGroupCount(g, c_unitCountAlive);
    while(count)
    {
        u = UnitGroupUnit(g, count);
		if( (UnitGetOwner(u) != EventPlayer() && 
		    PlayerType(UnitGetOwner(u)) != c_playerTypeNone &&
		    PlayerType(UnitGetOwner(u)) != c_playerTypeComputer &&
 	            PlayerType(UnitGetOwner(u)) != c_playerTypeHostile &&
		    PlayerType(UnitGetOwner(u)) != c_playerTypeNeutral &&
	            !libcrtx_admin_haspermissions(EventPlayer(), UnitGetOwner(u), libcrtx_admin_permissionlevel_moderator)) ||
		    UnitGetType(u) == libcrtx_getspawnertype() )
		{
			UnitGroupRemove(g, u);
		}	
		count = count - 1;
    }
    return g;
}

// This will only return the units that are selected by the triggering player and enforces permissions on them.
unitgroup libcrtx_selected_units()
{
	unitgroup g = UnitGroupSelected(EventPlayer());
	g = libcrtx_enforce_unit_permissions(g);

	return g;
}

// Returns the default string color name of a player slot. Ex: 1 - Red
string libcrtx_color_from_player_default(int plr)
{
	if( plr == 0 ) {
		return "white";
	} else if( plr == 1 ) {
		return "red";
	} else if( plr == 2 ) {
		return "blue";
	} else if( plr == 3 ) {
		return "teal";
	} else if( plr == 4 ) {
		return "purple";
	} else if( plr == 5 ) {
		return "yellow";
	} else if( plr == 6 ) {
		return "orange";
	} else if( plr == 7 ) {
		return "green";
	} else if( plr == 8 ) {
		return "lightpink";
	} else if( plr == 9 ) {
		return "violet";
	} else if( plr == 10 ) {
		return "lightgrey";
	} else if( plr == 11 ) {
		return "darkgreen";
	} else if( plr == 12 ) {
		return "brown";
	} else if( plr == 13 ) {
		return "lightgreen";
	} else if( plr == 14 ) {
		return "darkgrey";
	} else if( plr == 15 ) {
		return "pink";
	}

	return "";
}

// Returns the string name of the color a player currently is
string libcrtx_color_from_player(int plr)
{
	return libcrtx_color_from_player_default(PlayerGetColorIndex(plr, false));
}

// Takes a color and returns the ID of the player it is, by default.
// Ex: "red" - 1
int libcrtx_color_to_player_default(string colour)
{
	if( colour == "white" ) {
		return 0;
	} else if( colour == "red" ) {
		return 1;
	} else if( colour == "blue") {
		return 2;
	} else if( colour == "teal" ) {
		return 3;
	} else if( colour == "purple" ) {
		return 4;
	} else if( colour == "yellow" ) {
		return 5;
	} else if( colour == "orange" ) {
		return 6;
	} else if( colour == "green" ) {
		return 7;
	} else if( colour == "lightpink" ) {
		return 8;
	} else if( colour == "violet" ) {
		return 9;
	} else if( colour == "lightgrey" ) {
		return 10;
	} else if( colour == "lightgray" ) {
		return 10;
	} else if( colour == "darkgreen" ) {
		return 11;
	} else if( colour == "brown" ) {
		return 12;
	} else if( colour == "lightgreen" ) {
		return 13;
	} else if( colour == "darkgrey" ) {
		return 14; 
	} else if( colour == "darkgray" ) {
		return 14; 
	} else if( colour == "pink" ) {
		return 15;
	}

	return -1;
}

// This function takes a colour described as a string and returns the player id of that colour.
int libcrtx_color_to_player(string colour)
{
	int i;

	// special colors need go here, due to color re-use.
	if( colour == "hostile" ) {
		return libcrtx_setting_getint(libcrtx_setting_int_hostilecomputer);
	} else if( colour == "neutral" ) {
		return libcrtx_setting_getint(libcrtx_setting_int_neutralcomputer);
	} else if( colour == "smarthostile" ) {
		return libcrtx_setting_getint(libcrtx_setting_int_smarthostile);
	} else if( colour == "me" ) {
		return EventPlayer();
	}

	i = libcrtx_max_players - 1;
	while( i != -1 )
	{
		if( PlayerGetColorIndex( i, false ) == libcrtx_color_to_player_default(colour) && PlayerStatus(i) != c_playerStatusUnused) {
			return i;
		}

		i = i - 1;
	}

	return -1;
}

// Colors a 'text' depending on the current color of the player
text libcrtx_color_text_by_player(int player, text colorme)
{
	return TextWithColor(colorme, ColorFromIndex((PlayerGetColorIndex(player, false)), c_teamColorDiffuse));		
}

// Colors a text with color c.
text libcrtx_color_text(text colorme, color c)
{
	return TextWithColor(colorme, c);
}

// Returns a player's name colored to match his current player color.
text libcrtx_colored_player_name(int player)
{
	text pName = PlayerName(player);
	if( PlayerStatus(player) == c_playerStatusUnused ) {
		pName = StringToText("Unnamed");
	}

	return libcrtx_color_text_by_player(player, pName);
}

// Returns the EventPlayer's mouse position.
point libcrtx_mouse_position()
{
	return libcrtx_mouse_positions[EventPlayer()];
}

// Returns the spawner of the EventPlayer() or null.
unit libcrtx_spawner()
{
	unitgroup g;
	unit u;

	g = UnitGroup(libcrtx_getspawnertype(), EventPlayer(), RegionEntireMap(), null, 1);
	u = UnitGroupUnit(g, 1);
	if( u == null )
	{
		libcrtx_debug("can't find spawner!");
		return null;
	}

	return u;
}

// Clamps an int between min and max.
int libcrtx_boundsInt(int src, int min, int max)
{
	if( src < min ) {
		return min;
	}
	else if( src > max ) {
		return max;
	}
	
	return src;
}

// Clamps a fixed between min and max.
fixed libcrtx_boundsFixed(fixed src, fixed min, fixed max)
{
	if( src < min ) {
		return min;
	}
	else if( src > max ) {
		return max;
	}
	
	return src;
}

// Takes a color and turns it into a string that can be sent through an actormsg.
// Format: r,g,b
string libcrtx_color_to_string(color c)
{
        return IntToString(Color255FromFixed(ColorGetComponent(c, c_colorComponentRed))) + "," +
	       IntToString(Color255FromFixed(ColorGetComponent(c, c_colorComponentGreen))) + "," +
               IntToString(Color255FromFixed(ColorGetComponent(c, c_colorComponentBlue)));
}

// writes to the Cortex chat area
void libcrtx_write(playergroup p, string s)
{
	//libcrtx_output_addline( p, StringToText(s) );
	UIDisplayMessage( p, c_messageAreaDebug, StringToText(s) );
}

// writes to the cortex chat area.
void libcrtx_write_text(playergroup p, text t)
{
	//libcrtx_output_addline( p, t );
	UIDisplayMessage( p, c_messageAreaDebug, t );
}

// Writes an error in the EventPlayer() context.
void libcrtx_write_error(string s)
{
	libcrtx_write_text( PlayerGroupSingle(EventPlayer()), libcrtx_color_text(StringToText(s), Color(255,0,0)) );
}

// Writes a success message in the EventPlayer() context.
void libcrtx_write_success(string s)
{
	libcrtx_write_text( PlayerGroupSingle(EventPlayer()), libcrtx_color_text(StringToText(s), Color(0,255,0)) );
}

// Generates a bossbar id for the player. 
// NOTE: btype < 3!
int libcrtx_generate_bossbar_id(int player, int btype)
{
	return (player * 3) + btype;
}

// Trims all whitespace in front of and after a string.
string libcrtx_trim_string( string s )
{
	int x = 1;
	int y = StringLength(s);
	// Trim front
	while( StringSub(s, x, x) == " " ) {
		x = x + 1;
	}

	// Trim back
	while( StringSub(s, y, y) == " " ) {
		y = y - 1;
	}

	return StringSub(s, x, y);
}

// Replacement for native StringReplaceWord(string s, string word, string replace, int maxCount, bool caseSens)
// operates on a per-word basis unlike the native.
string libcrtx_replace_word(string s, string word, string replace, int maxCount, bool caseSens)
{
	string result;
	string part;
	int i = 1;
	part = StringWord(s, 1);
	while(part != "")
	{
		if( StringEqual(part, word, caseSens) ) {
			result += replace;
		} else {
			result += part;
		}
		i += 1;
		part = StringWord(s, i);
		if( part != "" ) {
			result += " ";
		}
	}
	return result;
}
