// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

int[libcrtx_max_players] libcrtx_output_dialog;
int[libcrtx_max_players] libcrtx_output_messagearea;

const int libcrtx_output_maxmessages = 15;
const int libcrtx_output_areawidth = 800;
const int libcrtx_output_areaheight = 500;
const int libcrtx_output_areaoffsetx = -200;
const int libcrtx_output_areaoffsety = 220;


text[libcrtx_max_players][libcrtx_output_maxmessages] libcrtx_output_messages;
fixed[libcrtx_max_players][libcrtx_output_maxmessages] libcrtx_output_times;

void libcrtx_output_init()
{
	int i = 1;
	while( i != libcrtx_max_players ) {
		libcrtx_output_dialog[i] = DialogCreate(libcrtx_output_areawidth, libcrtx_output_areaheight, c_anchorTop, libcrtx_output_areaoffsetx, libcrtx_output_areaoffsety, true);
		DialogSetImageVisible(libcrtx_output_dialog[i], false);
		libcrtx_output_messagearea[i] = libNtve_gf_CreateDialogItemLabel( libcrtx_output_dialog[i], libcrtx_output_areawidth, libcrtx_output_areaheight, c_anchorTopLeft, 0, 0, StringToText(""), Color(255, 255, 255), false, 0);
		libNtve_gf_SetDialogItemStyle( libcrtx_output_messagearea[i], "ChatDisplay", PlayerGroupSingle(i) );
		DialogSetVisible( libcrtx_output_dialog[i], PlayerGroupSingle(i), true );
		DialogControlSetVisible( libcrtx_output_messagearea[i], PlayerGroupSingle(i), true );

		i = i + 1;
	}
}

void libcrtx_output_refresh()
{
	text t;
	int i;
	int x = 1;
	fixed gt = libNtve_gf_GamePlayTime(1);
	while( x != libcrtx_max_players ) {
		gt = libNtve_gf_GamePlayTime(x);
		while( i != libcrtx_output_maxmessages ) {
			if( libcrtx_output_messages[x][i] != null && gt - libcrtx_output_times[x][i] < 25 ) {
				t = t + libcrtx_output_messages[x][i] + StringToText("<n/>");
			}
			i = i + 1;
		}
		DialogControlSetPropertyAsText( libcrtx_output_messagearea[x], c_triggerControlPropertyText, PlayerGroupSingle(x), t );
		t = StringToText("");
		x = x + 1;
	}

}

void libcrtx_output_addline(playergroup g, text t)
{
	int i;
	bool cont = false;
	int x = 1;
	while( x != libcrtx_max_players ) {
		if( !PlayerGroupHasPlayer(g, x) ) {
			x = x + 1;
			continue;
		}

		// Find a place to fit us in.
		while(i != libcrtx_output_maxmessages) {
			cont = false;
			if( libcrtx_output_messages[x][i] == null ) {
				libcrtx_output_messages[x][i] = t;
				libcrtx_output_times[x][i] = libNtve_gf_GamePlayTime(x);
				libcrtx_output_refresh();
				cont = true;
				break;
			}
			i = i + 1;
		} 

		if( cont ) {
			x = x + 1;
			continue;
		}

		// We're full!
		// Delete the last message and move everything back one to make room.
		i = 1;
		while(i != libcrtx_output_maxmessages) {
			libcrtx_output_messages[x][i-1] = libcrtx_output_messages[x][i];
			libcrtx_output_times[x][i-1] = libcrtx_output_times[x][i];
			i = i + 1;
		}

		libcrtx_output_messages[x][ libcrtx_output_maxmessages-1 ] = t;
		libcrtx_output_times[x][libcrtx_output_maxmessages-1] = libNtve_gf_GamePlayTime(x);
		libcrtx_output_refresh();
		x = x + 1;
	}
}