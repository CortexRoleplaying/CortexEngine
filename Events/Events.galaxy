// Cortex SC2 Roleplaying Engine
// Copyright (C) 2009-2010 <http://www.cortexrp.com/>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

include "Cortex/Events/TrollDetection.galaxy"
include "Cortex/Events/PlayerSetup.galaxy"
include "Cortex/Events/PlayerLeaves.galaxy"
include "Cortex/Events/PlayerMouseMovement.galaxy"

bool libcrtx_event_map_init(bool checkConds, bool runActions);
void libcrtx_events_init()
{
	libcrtx_event_map_init(false, true);
	TriggerAddEventTimePeriodic( TriggerCreate("libcrtx_event_periodic_tick"), 1.0, c_timeReal );
	TriggerAddEventDialogControl( TriggerCreate("libcrtx_event_dialog_clicked"), c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick );
	TriggerAddEventPlayerLeft(TriggerCreate("libcrtx_event_playerleaves"), c_playerAny, c_gameResultUndecided);
	TriggerAddEventMouseMoved(TriggerCreate("libcrtx_event_playermousemoves"), c_playerAny);
	libcrtx_event_trolldetection_init();
}

bool libcrtx_event_map_init(bool checkConds, bool runActions) {
	libcrtx_cortexid_init();
	libcrtx_event_playersetup();
	return true;
}

// Called on all dialog clicks
bool libcrtx_event_dialog_clicked(bool checkConds, bool runActions) {
	unitgroup g;
	int i;
	int x;
	unit u;
	region r;
	string s;

	// Waygate teleport system
	if( EventDialogControl() == libcrtx_waygate_dialogcontrol[EventPlayer()] ) {
		// We must initiate teleport now!
		g = libcrtx_selected_units();
		if( UnitGroupCount(g, c_unitCountAlive) > 0 ) {
			i = 1;
			while( i <= UnitGroupCount(g, c_unitCountAlive) ) {
				u = UnitGroupUnit(g, i);
				if( UnitTypeTestAttribute(UnitGetType(u), c_unitAttributeStructure) ) {
					i = i + 1;
					continue;
				}
				
				x = FixedToInt(UnitGetCustomValue(u, libcrtx_unit_custom_value_waygate));

				if( x != 0 ) {
					// Lookup this region by GUID!
					s = DataTableGetString(true, "region_guid_" + IntToString(x));
					if( s != "" ) {
						r = DataTableGetRegion(true, s);
						if( r != null ) {
							// Initiate transport.
							UnitSetPosition( u, RegionRandomPoint( r ),false );
						}	
					}
				}
				i = i + 1;
			}
		}
			
	}

	return true;
}

// Called every 1.0 seconds.
bool libcrtx_event_periodic_tick(bool checkConds, bool runActions)
{
	unitgroup g;
	int x;
	unit u;
	int p;
	int i = 1;
	while( i != libcrtx_max_players ) {
		if( libcrtx_waygate_dialog[i] != 0 ) {
			DialogDestroy(libcrtx_waygate_dialog[i]);
			libcrtx_waygate_dialog[i] = 0;
		}

		g = UnitGroupSelected(i);
		if(g == null) {
			i = i + 1;
			continue;
		}
		
		if( UnitGroupCount(g, c_unitCountAlive) == 0 ) {
			i = i + 1;
			continue;
		}

		x = 1;
		while( x <= UnitGroupCount(g, c_unitCountAlive) ) {
			u = UnitGroupUnit(g, x);
			// Check if this unit isn't a structure
			if( UnitTypeTestAttribute(UnitGetType(u), c_unitAttributeStructure) ) {
				x = x + 1;
				continue;
			}
			
			p = FixedToInt(UnitGetCustomValue(u, libcrtx_unit_custom_value_waygate));
			if( p == 0 ) {
				x = x + 1;
				continue;
			} else if( DataTableGetString(true, "region_guid_" + IntToString( p )) != "" ) {
				// Draw our dialogs!
				libcrtx_waygate_dialog[i] = DialogCreate(250, 100, c_anchorRight, 0, 120, true);
				DialogSetVisible(libcrtx_waygate_dialog[i], PlayerGroupSingle(i), true);
				libcrtx_waygate_dialogcontrol[i] = libNtve_gf_CreateDialogItemButton(libcrtx_waygate_dialog[i], 200, 70, c_anchorCenter, 0, 0, StringToText("Click to teleport these unit(s)."), StringToText("Enter"), "");
				DialogControlSetVisible( DialogControlLastCreated(), PlayerGroupSingle(i), true);
				break;
			}
			
			x = x + 1;
		}

		i = i + 1;
	}
	libcrtx_ai_update();
	return true;
}

bool libcrtx_event_unit_enter_region(bool checkConds, bool runActions)
{
	int i;
	region r;
	string s;

	// Are we in this region, or leaving?
	if( libNtve_gf_UnitInRegion( EventUnit(), EventUnitRegion() ) ) {
		// We're in the region!
		// But which region are we in (by name)?
		i = 0;
		while(i < libcrtx_region_guid_counter) {
			s = DataTableGetString(true, "region_guid_" + IntToString(i));
			r = DataTableGetRegion(true, s);
			if( r == EventUnitRegion() ) {
				// This is it!
				break;
			}

			i = i + 1;
			if( i == libcrtx_region_guid_counter ) {
				return true;
			}
		}

		// r is now the right region, and i == guid.
		// Do we have a linked region? (prolly, if we're here!)
		i = DataTableGetInt(true, s + "_link");
		UnitSetCustomValue(EventUnit(), libcrtx_unit_custom_value_waygate, IntToFixed(i));
	} else {
		// We are leaving this region. 
		// Figure out which GUID this region's link is, and remove it!
		i = 0;
		while(i < libcrtx_region_guid_counter) {
			s = DataTableGetString(true, "region_guid_" + IntToString(i));
			r = DataTableGetRegion(true, s);
			if( r == EventUnitRegion() ) {
				// This is it!
				break;
			}

			i = i + 1;
			if( i == libcrtx_region_guid_counter ) {
				return true;
			}
		}

		// r is now the right region, and i == guid.
		// Do we have a linked region? (prolly, if we're here!)
		i = DataTableGetInt(true, s + "_link");
		if( FixedToInt(UnitGetCustomValue(EventUnit(), libcrtx_unit_custom_value_waygate)) == i ) {
			UnitSetCustomValue(EventUnit(), libcrtx_unit_custom_value_waygate, 0);
		}
	}
	return true;
}
